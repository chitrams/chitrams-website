---
title: "`git` good with RStudio"
author: ""
description: "`git`-ing started, potential traps if you don't have a programming background, resources to help you, and bonus: dealing with limited admin rights in Windows."
date: "2024-04-23"
categories:
  - git
  - R
  - computer science
  - workflow
  - resources
  
draft: yes
---

Git is one of those things that I've always known I *should* learn how to use as a statistician, but never got around to *actually* learning--my exsiting workflow was working well enough that I couldn't justify putting the effort into learning it. It's mainly unattractive because it's a steep learning curve, as you need to learn a different way of thinking about managing your digital workflow. It also doesn't help that the official documentation is difficult to navigate. So I completely understand why a lot of statisticians and researchers I know aren't super keen to learn how to use Git and version control.

I've changed my tune now because work has necessitated the use of version control: collaborative software development requires other people to see what you've been up to. From that, I've been pleasantly surprised to find that using Git is also useful for my own personal projects, even if I'm the only person working on it. I hope I can show you how I've found Git helpful and which resources have helped me out most in learning how to use it.

I also came across the issue of struggling to set Git up in RStudio as I don't have access to admin rights on my work PC, which runs Windows. So if you're running into that issue as well, I've written down what's worked for me.

# Why use Git?

The biggest reason I've loved using Git as a statistician is the ability to change around my analysis without being confused about which parts of the analysis I've changed. Following from this, **if something breaks, I can just revert back to the previous working version.** Let me explain.

Say I have a workflow that looks like this:

1. {{<iconify system-uicons check>}} Read in data
2. {{<iconify system-uicons check>}} Generate summary table for data
3. {{<iconify system-uicons check>}} Fit two models to data
4. {{<iconify system-uicons check>}} Generate tables of model coefficients
5. {{<iconify system-uicons check>}} Put all tables in a report: a .Rmd file

Everything's working, the tables look pretty, and this is all saved in the `main` branch. 

Now, say that I've decided to make the tables in Step 2 look even prettier. I'll create a new branch called `prettier-tables` where I'll play around with the code. Then I find that I don't really understand how the package for making nicer tables work, and now two of the steps don't work:

1. {{<iconify system-uicons check>}} Read in data
2. {{<iconify system-uicons cross>}} Generate summary table for data
3. {{<iconify system-uicons check>}} Fit two models to data
4. {{<iconify system-uicons check>}} Generate tables of model coefficients
5. {{<iconify system-uicons cross>}} Put all tables in a report: a .Rmd file

The deadline's looming, my supervisor asks me to re-fit one of the models, and tells me we don't need prettier tables. I re-fit the model, which is an easy update and works fine, but the report isn't rendering becasue I screwed something up in Step 2--and I'm not sure which bits of my code are failing.

This is where Git comes in: I can go back to the `main` branch when everything was working just fine and abandon the `prettier-tables` branch. Then I can make my model changes and render my report with the updates. This is especially useful in situtations where you have to figure out which parts of your code you've changed and which ones you haven't, and then change the edited bits. You don't have to think about which bits to change and worry about whether you've missed something--you can simply switch branches with one button in RStudio! It's far less stressful this way.

# Resources to learn Git

I've found the following resources really good:

-   [Happy Git and GitHub for the useR](https://happygitwithr.com/). This resource is specific to using Git and GitHub within RStudio. Incredibly beginner-friendly.
-   An interactive tutorial: [Learn Git Branching](https://learngitbranching.js.org/). Great for visualising Git concepts.
-   [Oh Shit, Git!?!](https://ohshitgit.com/) is a great website that helps you troubleshoot errors in plain English.
-   A deep dive: Version Control with Git (Second Edition) by Jon Loeliger and Matthew McCullough. Only read this once you're pretty comfortable with using Git, and if you're interested in understanding what happens underneath the surface. You don't need to read this to be able to use Git, but I've found it interesting.

# Admin rights issues on Windows

Using SSH instead of HTTPS on Windows when setting up **Control panel** \> **Edit environment variables** for your account Select 'Path', click the 'Edit' button, and add the path for your Git installation.
