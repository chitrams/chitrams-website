[
  {
    "objectID": "code-collection/2024-08-20-combine-ggplots/index.html",
    "href": "code-collection/2024-08-20-combine-ggplots/index.html",
    "title": "Combine multiple ggplot2 plots",
    "section": "",
    "text": "library(palmerpenguins)"
  },
  {
    "objectID": "code-collection/2024-08-20-combine-ggplots/index.html#use-case",
    "href": "code-collection/2024-08-20-combine-ggplots/index.html#use-case",
    "title": "Combine multiple ggplot2 plots",
    "section": "",
    "text": "library(palmerpenguins)"
  },
  {
    "objectID": "code-collection/2024-08-20-combine-ggplots/index.html#patchworkhttpspatchwork.data-imaginist.com",
    "href": "code-collection/2024-08-20-combine-ggplots/index.html#patchworkhttpspatchwork.data-imaginist.com",
    "title": "Combine multiple ggplot2 plots",
    "section": "[patchwork](https://patchwork.data-imaginist.com/)",
    "text": "[patchwork](https://patchwork.data-imaginist.com/)"
  },
  {
    "objectID": "code-collection/2024-08-20-combine-ggplots/index.html#grid.arrange-in-gridextrahttpscran.r-project.orgwebpackagesgridextravignettesarrangegrob.html",
    "href": "code-collection/2024-08-20-combine-ggplots/index.html#grid.arrange-in-gridextrahttpscran.r-project.orgwebpackagesgridextravignettesarrangegrob.html",
    "title": "Combine multiple ggplot2 plots",
    "section": "grid.arrange() in [gridExtra](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html)",
    "text": "grid.arrange() in [gridExtra](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html)"
  },
  {
    "objectID": "code-collection/2024-08-20-combine-ggplots/index.html#ggarrange-in-ggpubrhttpsrpkgs.datanovia.comggpubrreferenceggarrange.html",
    "href": "code-collection/2024-08-20-combine-ggplots/index.html#ggarrange-in-ggpubrhttpsrpkgs.datanovia.comggpubrreferenceggarrange.html",
    "title": "Combine multiple ggplot2 plots",
    "section": "ggarrange() in [ggpubr](https://rpkgs.datanovia.com/ggpubr/reference/ggarrange.html)",
    "text": "ggarrange() in [ggpubr](https://rpkgs.datanovia.com/ggpubr/reference/ggarrange.html)"
  },
  {
    "objectID": "code-collection/2024-08-20-combine-ggplots/index.html#plot_grid-in-cowplothttpscran.r-project.orgwebpackagescowplotvignettesintroduction.html",
    "href": "code-collection/2024-08-20-combine-ggplots/index.html#plot_grid-in-cowplothttpscran.r-project.orgwebpackagescowplotvignettesintroduction.html",
    "title": "Combine multiple ggplot2 plots",
    "section": "plot_grid() in [cowplot](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html)",
    "text": "plot_grid() in [cowplot](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html)"
  },
  {
    "objectID": "code-collection/2024-08-20-combine-ggplots/index.html#which-one-is-best",
    "href": "code-collection/2024-08-20-combine-ggplots/index.html#which-one-is-best",
    "title": "Combine multiple ggplot2 plots",
    "section": "Which one is best?",
    "text": "Which one is best?"
  },
  {
    "objectID": "recipes/index.html",
    "href": "recipes/index.html",
    "title": "Recipes",
    "section": "",
    "text": "Kanelsnurrer\n\n\n\nbread\n\n\neffort/medium\n\n\ntime/waiting\n\n\n\nNorwegian cinnamon snails: a beautiful version of cinnamon rolls with cardamom-infused yeasted dough.\n\n\n\nSep 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChewy and crispy chocolate chip cookies\n\n\n\ncookies\n\n\neffort/medium\n\n\ntime/medium\n\n\n\nOtherwise known as my spreadsheet cookies, from the number of iterations it took to get to my ideal cookie: chewy on the inside and crispy on the outside.\n\n\n\nSep 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSweet corn egg-drop soup\n\n\n\nsides\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nA simple recipe. Usually served in Chinese restaurants.\n\n\n\nJul 14, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPeanut butter cookies from sourdough discard\n\n\n\ncookies\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nA quick and easy use for sourdough discard.\n\n\n\nJun 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeef noodle salad\n\n\n\nmains\n\n\neffort/medium\n\n\ntime/medium\n\n\n\nA fresh and delightful main-course salad.\n\n\n\nMay 5, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBaked porridge\n\n\n\nbreakfast\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nAn easy, delightful and warming breakfast, perfect for colder weather.\n\n\n\nMay 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBanana bread\n\n\n\ncakes\n\n\neffort/easy\n\n\ntime/medium\n\n\n\nOne of my favourites for rescuing unwanted bananas.\n\n\n\nApr 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nChewy ANZAC biscuits\n\n\n\ncookies\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nA chewier and slightly more complex take on the classic.\n\n\n\nApr 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMasala chai\n\n\n\ndrinks\n\n\neffort/easy\n\n\ntime/waiting\n\n\n\nA warming spiced tea with equal amounts of (heady) caffeine and sugar. This adaptation tastes similar to the one served in Dishoom London: the best masala chai I’ve ever had.\n\n\n\nApr 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nVegan banana cookies\n\n\n\ncookies\n\n\nvegan\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nA delicious and easy-to-make cookie with common pantry ingredients.\n\n\n\nApr 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCarrot cake (and frostings)\n\n\n\ncakes\n\n\neffort/medium\n\n\ntime/medium\n\n\n\nAn easy take on the classic, with several frostings you could choose from.\n\n\n\nApr 3, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "recipes/2024-09-11-chewy-crispy-choc-chip-cookies/index.html",
    "href": "recipes/2024-09-11-chewy-crispy-choc-chip-cookies/index.html",
    "title": "Chewy and crispy chocolate chip cookies",
    "section": "",
    "text": "Makes approximately 40 cookies. This recipe is my own creation.\nIngredients\nYou’ll also need\nMethod\nStart by making browned butter. Melt the butter in a medium saucepan over medium-high heat. Cook, frequently swirling the pan gently, until particles begin to turn golden brown and butter smells nutty, about 5 minutes. Remove from heat and continue swirling the pan until the butter is a rich brown, about 15 seconds longer. Transfer to a small bowl and whisk in the ice cubes. Then transfer the bowl to refrigerator and allow to cool completely, for about 20 minutes, whisking occasionally.\nNow let’s make the cookie dough.\nTransfer dough to an airtight container and refrigerate for at least a few hours and up to 3 days.\nWhen ready to bake, pre-heat oven to 160ºC. Line baking trays with baking paper. Roll dough into balls about 25 g each and place them 5 cm apart on the baking tray, as they will expand when baking. Lightly flatten the balls with your fingers. Bake for 12-15 minutes until golden brown.\nOnce removed from oven, let cool on the trays for at least five minutes so it has time to firm up. Transfer to a wire rack or eat immediately.\nThese cookies are best eaten fresh. After one day I find they lose their chewy texture."
  },
  {
    "objectID": "recipes/2024-09-11-chewy-crispy-choc-chip-cookies/index.html#notes",
    "href": "recipes/2024-09-11-chewy-crispy-choc-chip-cookies/index.html#notes",
    "title": "Chewy and crispy chocolate chip cookies",
    "section": "Notes",
    "text": "Notes\nYou can freeze these cookies by making the dough up to the refrigeration step. Wrap the dough up tightly in cling film or an air-tight container, and place it in the freezer instead of the fridge. The night before you’re ready to bake, move the cookie dough to your countertop to thaw overnight, then proceed as above."
  },
  {
    "objectID": "recipes/2024-09-11-chewy-crispy-choc-chip-cookies/index.html#footnotes",
    "href": "recipes/2024-09-11-chewy-crispy-choc-chip-cookies/index.html#footnotes",
    "title": "Chewy and crispy chocolate chip cookies",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThese cookies are chewy due to the extra protein (bread flour) and added moisture from the brown sugar. You can choose to use all-purpose flour entirely if it’s too much of a fuss, and it’ll still be quite chewy.↩︎\nYou can substitute with castor sugar but I find that granulated sugar gives a crispier crust.↩︎"
  },
  {
    "objectID": "recipes/2024-06-09-peanut-butter-sourdough-cookies/index.html",
    "href": "recipes/2024-06-09-peanut-butter-sourdough-cookies/index.html",
    "title": "Peanut butter cookies from sourdough discard",
    "section": "",
    "text": "Makes 24. Recipe adapted from the Homemade Food Junkie blog.\nIngredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-06-09-peanut-butter-sourdough-cookies/index.html#footnotes",
    "href": "recipes/2024-06-09-peanut-butter-sourdough-cookies/index.html#footnotes",
    "title": "Peanut butter cookies from sourdough discard",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLess sourdough starter means your cookie will end up more crispy; using more starter means your cookie will be chewier. I think the texture would also vary depending on how active your starter is to begin with, so do experiment!↩︎"
  },
  {
    "objectID": "recipes/2024-05-04-baked-porridge/index.html",
    "href": "recipes/2024-05-04-baked-porridge/index.html",
    "title": "Baked porridge",
    "section": "",
    "text": "Serves 2. Adapted from The Natural Baker by Henrietta Inman.\nIngredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-05-04-baked-porridge/index.html#footnotes",
    "href": "recipes/2024-05-04-baked-porridge/index.html#footnotes",
    "title": "Baked porridge",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI like to use a tart cooking apple like Granny Smith’s.↩︎\nIf you’d like to substitute with plant-based milks like almond milk, I find that you need more of it, about 400-450 g.↩︎\nYou can do this step the night before. When the apples are done, turn off the oven, leave the oven door slightly ajar, and let the apples sit there until morning.↩︎"
  },
  {
    "objectID": "recipes/2024-04-25-anzac-biscuits/index.html",
    "href": "recipes/2024-04-25-anzac-biscuits/index.html",
    "title": "Chewy ANZAC biscuits",
    "section": "",
    "text": "Ingredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-04-25-anzac-biscuits/index.html#footnotes",
    "href": "recipes/2024-04-25-anzac-biscuits/index.html#footnotes",
    "title": "Chewy ANZAC biscuits",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTo make these biscuits even chewier, substitute up to 70 g of this flour with a high-protein flour. A potential issue with doing this, however, is your flour may absorb more liquids, leading to dryness. See note in Step 5.↩︎\nYou could use white sugar in a pinch, but they will result in less chewy cookies. Adversely, substituting with dark brown sugar leads to even chewier cookies.↩︎\nAlternatively, use shredded coconut–or a mix of both.↩︎\nIf your mix is a tad dry–in other words, difficult to roll into a ball without breaking (perhaps because you substituted a different flour)–you can add a bit more melted butter. It’s better if the dough is too wet from too much butter than too little, so err on the side of too much.↩︎"
  },
  {
    "objectID": "recipes/2024-04-15-vegan-banana-cookies/index.html",
    "href": "recipes/2024-04-15-vegan-banana-cookies/index.html",
    "title": "Vegan banana cookies",
    "section": "",
    "text": "Adapted from Vegan Cookies Invade Your Cookie Jar (goodreads) by Isa Chandra Moskowitz and Terry Hope Romero. Makes about a dozen larger cookies, or 20 smaller cookies.\nIngredients\n\n1-2 very ripe medium banana\n70g canola oil\n100g sugar\n1 teaspoon vanilla extract\n115g all purpose flour\n0.5 teaspoon baking soda\n0.25 teaspoon salt\n0.25 teaspoon ground cinnamon\n160g rolled oats\n65g toasted chopped walnuts or pecans\n85g chocolate cut up into chunks, or chocolate chips (ideally these would be vegan)\n\nMethod\n\nPreheat oven to 180C. Lightly spray two baking sheets with oil, or line with parchment paper.\nIn a mixing bowl, mash banana(s) well.\nAdd oil, sugar, and vanilla, and mix.\nAdd flour, baking soda, salt, and cinnamon. Mix until just moistened.\nAdd oatmeal, walnuts, and chocolate chips. Using your hands or a spoon, mix well, ensuring oats are well-moistened. If dough is very slippery, add a little bit more flour.\nUsing clean, wet hands, roll dough into balls slightly smaller than a golf ball (about 3cm in diameter). Flatten slightly and place 5 cm apart on baking sheet.\nBake until lightly browned, 10-12 minutes. Remove from heat and allow to cool for two minutes, then transfer to a rack to cool completely. Store in an airtight container.\n\n\nNotes\nAs I’m not vegan, I prefer recipes that don’t rely on egg replacement products such as flaxseed.\nOther books I’d like to read about vegan baking:\n\nVegan cupcakes take over the world (goodreads)\nThe joy of vegan baking (goodreads)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curated by Chitra",
    "section": "",
    "text": "I write about things I find interesting so my future self can find them more easily. Subjects within this curation include (but are not limited to):\n\ninteresting problems in statistics, data science, and/or statistical programming,\nresources to become a better statistician and/or programmer,\nrecipes that I frequently refer to, and\nresources for my own personal development that I’ve found useful, such as:\n\nlearning how to learn,\nhow to write better,\nyoga, and\nplaying the piano."
  },
  {
    "objectID": "curation/draft-starting-sourdough/index.html",
    "href": "curation/draft-starting-sourdough/index.html",
    "title": "Sourdough for starters",
    "section": "",
    "text": "Compare how your dough looks with videos."
  },
  {
    "objectID": "curation/draft-starting-sourdough/index.html#beginner-resources",
    "href": "curation/draft-starting-sourdough/index.html#beginner-resources",
    "title": "Sourdough for starters",
    "section": "Beginner resources",
    "text": "Beginner resources\n\nThe Bread Code’s flowcharts help demistify the process"
  },
  {
    "objectID": "curation/draft-starting-sourdough/index.html#more-advanced-resources",
    "href": "curation/draft-starting-sourdough/index.html#more-advanced-resources",
    "title": "Sourdough for starters",
    "section": "More advanced resources",
    "text": "More advanced resources\n\nThe Bread Code’s Sourdough Framework book\nFlour Water Salt Yeast book by Ken Forkish\nThe Sourdough Journey website\n\nHis PDF file that explains the different crumb structures is really helpful: https://thesourdoughjourney.com/faq-over-under-proofed/\n\nBread science by Emily ?"
  },
  {
    "objectID": "curation/draft-psych-resources/index.html",
    "href": "curation/draft-psych-resources/index.html",
    "title": "Resources for psychology",
    "section": "",
    "text": "Books that I’ve found useful in understanding different modalities and general self-help"
  },
  {
    "objectID": "curation/2024-04-26-yoga-with-adriene-favourites/index.html",
    "href": "curation/2024-04-26-yoga-with-adriene-favourites/index.html",
    "title": "My favourite yoga videos",
    "section": "",
    "text": "A list of my favourite yoga videos from Yoga With Adriene on YouTube, along with some notes as to why I enjoy them. These are the videos I keep coming back to.\n\nWorkouts\n\nMove - Day 27: Strong - 9/10 Intensity, 10/10 Enjoyment\nA more intense practice that focuses on upper-body strength.\nMove - Day 16: Anchor - 8/10 Intensity, 8/10 Enjoyment\nIncludes breathwork, core, side planks, legs, and balance-work.\nMove - Day 3: Stretch - 6/10 Intensity, 8/10 Enjoyment\nWorks on your legs and lower back, with warrior poses held for quite a while.\nMove - Day 11: Mobility - 6/10 Intensity, 8/10 Enjoyment\nExcellent leg activation with lots of hydrants. Mainly leg + back work.\nTrue - Day 13: Strength and Harmony - 7/10 Intensity, 8/10 Enjoyment\nGood core and whole-body exercises. More on the gentle side.\nYoga for Abdominal Strength - 8/10 Intensity, 8/10 Enjoyment\nA solid upper-body practice.\nLower Body Strength - 7/10 Intensity, 8/10 Enjoyment\nPretty good practice for the hips and legs. The channel doesn’t have many videos explicitly labelled for lower body (although there are actually quite a few, see above) so I like that this does what it says.\n\n\n\nEnergising\n\n20-minute Yoga to Shift Perspective- 7/10 Intensity, 10/10 Enjoyment\nIncludes side planks and some strength work. Excellent for energising, just enough strength work for a bit of warmth.\n20-minute Morning Flow- 7/10 Intensity, 9/10 Enjoyment\nCore work, some difficult poses, overall great energising practice\nShort Wake-Up Flow - 4/10 Intensity, 7/10 Enjoyment\nEasy practice, gentle full-body flow with some breathwork.\nOffice Break Yoga - 3/10 Intensity, 6/10 Enjoyment\nPretty good for a break when you’ve been sitting down for a while.\n\n\n\nStretches, some situation-specific\n\n7-minute Post-Run Yoga - 2/10 Intensity, 10/10 Enjoyment\nDoes what it says: excellent quad and calf stretches.\n13-minute Yoga for Digestion - 1/10 Intensity, 10/10 Enjoyment\nReally good for when you overeat and feel way too full of food. Makes your belly feel better somehow.\n13-minute Airport Yoga - 2/10 Intensity, 10/10 Enjoyment\nA quick, standing full-body stretch, excellent for when you’ve been sitting down for a while.\n5-minute Full-Body Stretch - 6/10 Intensity, 8/10 Enjoyment\nA good full-body stretch (on the mat) that gets you moving.\n\n\n\nRelaxing\n\n12-minute Wind-Down Yoga - 1/10 Intensity, 10/10 Enjoyment\nA relaxing practice that I really enjoy doing before bed.\n20-minute Gentle, Relaxing, Cozy Flow - 1/10 Intensity, 10/10 Enjoyment\nWhat it says it is: gentle, relaxing, and cozy."
  },
  {
    "objectID": "code-collection/2024-10-05-computers/index.html",
    "href": "code-collection/2024-10-05-computers/index.html",
    "title": "Resources to understand what computers are",
    "section": "",
    "text": "3 November 2024 update: This list will be updated as I find more resources.\nAs I do more and more programming, I’m finding computer science unavoidable. Specifically, the hardware side of things. I think it’s important to understand the basics of how computers work–in other words, “computer architecture”-if you want to write better code.\nI never received a formal education in computer science, so it was important to find resources that were accessible. Here’s my round-up of the best resources I found and why I liked them."
  },
  {
    "objectID": "code-collection/2024-10-05-computers/index.html#dipping-your-toes",
    "href": "code-collection/2024-10-05-computers/index.html#dipping-your-toes",
    "title": "Resources to understand what computers are",
    "section": "Dipping your toes",
    "text": "Dipping your toes\n\nThe Computer Science Crash Course playlist on YouTube is fantastic. It’s what it says it is (a crash course), so you’ll learn just enough to prepare you for diving deeper. There are 40 episodes in this series but they are all bite-sized and of a reasonable length.\nCode: The hidden language of computer hardware and software by Charles Petzold (Google Books) is an excellent book that starts you from the very beginning (0’s and 1’s) and conceptually builds towards how computers work. I highly recommend this if you’d like an intuitive understanding of hardware and software. I also think he’s a great writer."
  },
  {
    "objectID": "code-collection/2024-10-05-computers/index.html#more-advanced-topics",
    "href": "code-collection/2024-10-05-computers/index.html#more-advanced-topics",
    "title": "Resources to understand what computers are",
    "section": "More advanced topics",
    "text": "More advanced topics\n\nThe course Build a Modern Computer from First Principles: From Nand to Tetris on coursera. You can also find the Nand2Tetris homepage here. I thought this was a really good course. It is quite detailed; I only skimmed through as I’m not (yet) interested in building my own computer.\nCS50x online, or on edX if you’d like a verified certificate. This comprehensive course covers programming more generally and doesn’t go much into the hardware. Regardless, I still think it’s a good starting point for anyone who wants to learn how to program, especially if you’ve never programmed before (or never taken a formal course in computer programming)."
  },
  {
    "objectID": "code-collection/2024-09-13-command-line-tips/index.html",
    "href": "code-collection/2024-09-13-command-line-tips/index.html",
    "title": "List of command line tips and resources",
    "section": "",
    "text": "As I use the command line more and more, I realise there are more efficient ways of going about things that may not be obvious when you first start. Here’s a list of the most useful commands, concepts, and shortcuts I’ve come across when using the command line.\nI will update this list as I come across more concepts that I find helpful."
  },
  {
    "objectID": "code-collection/2024-09-13-command-line-tips/index.html#shortcuts-to-generally-save-time",
    "href": "code-collection/2024-09-13-command-line-tips/index.html#shortcuts-to-generally-save-time",
    "title": "List of command line tips and resources",
    "section": "Shortcuts to generally save time",
    "text": "Shortcuts to generally save time\n\ntab to auto-complete names (files, folders, or programs) in your current directory\nctrl + c to cancel what you’ve written and start fresh, or terminates a process that’s currently running\ncd + - to change to the last directory that you were in (especially useful if you’re switching back and forth between two directories)\nctrl + r to search through your command line history"
  },
  {
    "objectID": "code-collection/2024-09-13-command-line-tips/index.html#shortcuts-for-text-editing",
    "href": "code-collection/2024-09-13-command-line-tips/index.html#shortcuts-for-text-editing",
    "title": "List of command line tips and resources",
    "section": "Shortcuts for text editing",
    "text": "Shortcuts for text editing\n\nctrl + a moves the cursor to the beginning of the line\nctrl + e moves the cursor to the end of the line\nalt + f (or alt + → on a Mac) moves the cursor to the next word\nalt + b (or alt + ← on a Mac) moves the cursor back to the previous word\nctrl + k deletes the text from the cursor to the end of the line\nctrl + u deletes the text from the cursor to the beginning of the line"
  },
  {
    "objectID": "code-collection/2024-09-13-command-line-tips/index.html#resources",
    "href": "code-collection/2024-09-13-command-line-tips/index.html#resources",
    "title": "List of command line tips and resources",
    "section": "Resources",
    "text": "Resources\n\nThe Linux Command Line by William Shotts (freely available here) provides a friendly introduction to what you need to know about the command line."
  },
  {
    "objectID": "code-collection/2024-07-29-python-setup/index.html",
    "href": "code-collection/2024-07-29-python-setup/index.html",
    "title": "Setting up python",
    "section": "",
    "text": "Questions to answer: - What is Python? What is conda? What is Anaconda3? What is Jupyter? And how does this all play together with VS Code? - Maybe add screenshots so people know what I’m talking about - Why initialising your environment can be hard - Resources I’ve found useful and trying to figure out what’s going on…\n\nTo go into the Python interpreter in VS Code &gt; Command Prompt, type python\nTO exit, type exit() or quit() or use the keyboard shortcut Ctrl + Z followed by Enter on Windows\n\nHow I installed it without admin rights: - Download anaconda - Add the three lines to PATH: Edit Environment Variables to your account - anaconda3 - anaconda3/Scripts - anaconda3/Library/bin - Then in VS code change the default terminal to command prompt instead of PwerShell (still not sure hwy this helps)"
  },
  {
    "objectID": "code-collection/2024-05-31-git-good-with-rstudio/index.html",
    "href": "code-collection/2024-05-31-git-good-with-rstudio/index.html",
    "title": "git good with RStudio",
    "section": "",
    "text": "Git is one of those things that I’ve always known I should learn how to use as a statistician, but never got around to actually learning–my exsiting workflow was working well enough that I couldn’t justify putting the effort into learning it. It was unattractive mainly because it’s a steep learning curve, as you need to learn a different way of thinking about managing your digital workflow. It also doesn’t help that the official documentation is difficult to navigate. So I completely understand why a lot of statisticians and researchers I know aren’t super keen to learn how to use Git and version control.\nI’ve changed my tune now because work has necessitated the use of version control: collaborative software development requires other people to see what you’ve been up to. From that, I’ve been pleasantly surprised to find that using Git is also useful for my own personal projects–yes, even when I’m the only person working on it. I hope I can show you how I’ve found Git helpful and which resources have helped me out most in learning how to use it.\nI also came across the issue of struggling to set Git up in RStudio as I don’t have admin rights on my work PC, which runs Windows. So if you’re running into that issue as well, I’ve written down what’s worked for me.\n\nWhy use Git?\nThe biggest reason I’ve loved using Git as a statistician is the ability to change my analysis without being confused about which parts of the analysis I’ve changed. Following from this, if something breaks, I can simply revert to the previous working version. Let me explain.\nSay I have a workflow that looks like this:\n\n Read in data\n Generate summary table for data\n Fit two models to data\n Generate tables of model coefficients\n Put all tables in a report: a .Rmd file\n\nEverything’s working, all tables look pretty, and this is all saved in the main branch.\nNow, say that I’ve decided to make the tables in Step 2 look even prettier. I’ll create a new branch called prettier-tables where I’ll play around with the code. Then I find that I don’t really understand how to work the new package I’m using for making the prettier tables, and two of the steps break:\n\n Read in data\n Generate summary table for data\n Fit two models to data\n Generate tables of model coefficients\n Put all tables in a report: a .Rmd file\n\nThe deadline’s looming, my supervisor asks me to re-fit one of the models, and tells me we don’t need prettier tables. I re-fit the model, which is an easy update and works fine, but the report isn’t rendering because I screwed something up in Step 2–and I’m not sure which bits of my code are failing.\nThis is where Git comes in: I can go back to the main branch when everything was working just fine and abandon the prettier-tables branch. Then I can make my model changes and render my report with the updates. This is especially useful in situtations where you have to figure out which parts of your code you’ve changed and which ones you haven’t, and subsequently change back the edited bits. You don’t have to think about which bits to change, and worry about whether you’ve missed something–you can simply switch branches with one button in RStudio! It’s far less stressful this way.\n\n\nResources to learn Git\nSo how is it that I’ve learnt to use Git? I think what’s worked best for me so far is forcing myself to put an existing workflow on to a GitHub repository and making sure that I always use version control. It helps as well that I’m collaborating with people who use Git day-to-day, so I can ask them questions when I get stuck on a particular thing. I think the hardest thing about learning Git is how inscrutable the technical language is when you’re first starting out. On that note, I’ve found Stack Exchange and ChatGPT really useful: they are places where you can translate technical Git language into plain English. ChatGPT is especially useful if you’re learning Git on your own and don’t have other people you can ask your questions to.\nI’ve found the following resources incredibly useful:\n\nHappy Git and GitHub for the useR. This resource is specific to using Git and GitHub within RStudio. Incredibly beginner-friendly.\nAn interactive tutorial: Learn Git Branching. Great for visualising Git concepts.\nOh Shit, Git!?! is a great website that helps you troubleshoot errors in plain English.\n\nAnd once I was on top of the above resources and wanted to have a deeper dive into Git, I found the following resources really useful:\n\nVersion Control with Git (Second Edition) by Jon Loeliger and Matthew McCullough. It’s not open source and is published by O’Reilly (book website here). I’d only read this once you’re pretty comfortable with using Git, and if you’re interested in understanding what happens underneath the surface. You don’t need to read this to be able to use Git but I’ve found it interesting, and the writing engaging.\nPro Git by Scott Chacon and Ben Straub, available here. This is a popular open source textbook for Git and I’ve found it useful, but I think it only starts making sense once you have the fundamental understanding of Git. In other words, I couldn’t just pick it up and start reading it when I was first trying to figure Git out.\n\n\n\nAdmin rights issues on Windows\nI came across this issue when I was trying to set up Git on my work computer, which runs Windows and which I don’t have admin rights to. After I’ve downloaded and installed Git for Windows, I found that RStudio was struggling to “find” the Git executable. To solve this, I manually changed the path for my Git installation. I did this by:\n\ngo to Control panel &gt; Edit environment variables for your account,\nselect ‘Path’,\nclick the ‘Edit’ button and add the path for your Git installation.\n\nSo my understanding of why this happens is: when you don’t have admin rights on Windows, your computer only installs Git for your user directory, but RStudio tries to find the path to your Git executable at the system-wide level instead of within your user-specific directory. Which means you have to point to that path yourself.\nAnother tweak I did that I think helped make it work was to use SSH instead of HTTPS. I’m not sure how exactly that would have helped, but Git started working after I made that change. Or maybe it’s because I restarted the RStudio session; who knows? (If anyone understands why this would have helped, I would love an explanation.)\n\n\nConclusion\nSo all this to say that I’ve learnt how to Git good (with R!) and I hope the list of resources is useful for your own Git journey. I think the main takeaways are to actually use Git with your project and figure out how Git is useful for you. Once you convince yourself that Git is useful for your workflow, it gets a lot easier to learn."
  },
  {
    "objectID": "code-collection/2022-08-16-functional-programming-in-r/index.html",
    "href": "code-collection/2022-08-16-functional-programming-in-r/index.html",
    "title": "Functional programming",
    "section": "",
    "text": "I was recommended Hadley Wickham’s talk The Joy of Functional Programming (for Data Science) when I was struggling to code some iterative processes (you can find his talk on YouTube). The issue I ran into was trying to run row-wise and column-wise functions using for loops in R (a kerfuffle I’ll document in another blog post), which can get quite nasty with nested for loops.\nThe main lesson I learnt from the talk is: some clever programmers have wrapped up for loops in a function, map, that makes writing and reading code so much easier. It takes a while to get used to implementing these functions, but I can already say (in my very short two weeks of using it) that it’s a game-changer for my workflow. I think the main advantage of using map (and its cousins, which you can explore from the purrr package) is that it allow us to focus on both the action and the object whilst programming. In comparison, whilst using for loops I find myself focusing more on the object and the action can get lost. Here’s an example to show you what I mean:\n# For loop approach:\nout1 &lt;- vector(\"double\", ncol(mtcars))\nfor (i in seq_along(mtcars)) {\n  out1[[i]] &lt;- mean(mtcars[[i]], na.rm = TRUE)\n}\n\nout2 &lt;- vector(\"double\", ncol(mtcars))\nfor (i in seq_along(mtcars)) {\n  out2[[i]] &lt;- median(mtcars[[i]], na.rm = TRUE)\n}\n\n# Functional programming approach:\nlibrary(purrr)\n\nout1 &lt;- map_dbl(mtcars, mean, na.rm = TRUE)\nout2 &lt;- mtcars %&gt;% map_dbl(median, na.rm = TRUE)\n\n# Where map_dbl is an extension of map, returning\n# a vector in double ('dbl') type.\nYou only figure out which actions we’re taking (calculating the mean and median) a few lines down the for loop, after the object has been defined. There is also more room for error as we have to define the object before we run the action every time (i.e. creating the vector and sequencing along each column before calculating the mean and median). The functional programming approach is more concise. You can also see that map plays well with the pipe.\nSomething to note: in the example above, we use map_dbl instead of just map. This is one of the many extensions to the map function; there is also map_chr to return character-type lists.\nI also find the following figure handy to understand how the map functions work:\n\n\n\nThe map function in R. Figure from Hadley Wickham’s Advanced R.\n\n\nAnother thing to note is there are several ways of writing out the same thing using map. In the following bit of code you’ll find four different ways of writing out the same function: finding the number of unique values in each column of the mtcars dataset.\nmap_dbl(mtcars, function(x) length(unique(x)))\n\nmap_dbl(mtcars, ~ length(unique(.x)))\n\nmap_dbl(\n  .x = mtcars,\n  .f = length(unique(.x))\n)\n\nmap_dbl(\n  .x = mtcars,\n  .f = \\(x) length(unique(x))\n)\n\n# All three above returns:\n#&gt; mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;  25    3   27   22   22   29   30    2    2    3    6\nIt took me a while to figure out when I needed to add a dot to the variable (.x)–and to be honest, I still haven’t gotten to the bottom of why we sometimes need to prefix x with a dot (and sometimes not).\nHere’s another simple example, with an equivalent in lapply:\nmap(paths, ~ read.csv(.x))\n\n# Equivalent to the following:\nlapply(paths, function(x) read.csv(x))\nConcise and easy to read.\nThe main issue I had with learning this concept was the steep learning curve. You have to put quite a bit of time into learning which functions are available in the purrr package. I still struggle with figuring out which function I should use and how I should write out the program. But as with most R packages, there are good resources out there that explains these functions really well. So despite the difficulties, I’ll be replacing most of my for loops with map.\n\nUseful links for further reading:\n\nYou can find the purrr website here.\npurrr has a cheat sheet (released by RStudio) here.\nHadley Wickham gives a good explanation of this in Section 9.2 of his Advanced R textbook."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "About me\nI am a medical statistician and researcher with interests in epidemiology, climate change, and public health. More generally, I am interested in finding ways to be better at cooking, baking, learning, note-taking, writing, yoga, statistical programming, and understanding other people.\nI find that writing leads to understanding, and writing as if other people are going to read what you’re writing is the next level up. So here I am with a digital garden-kind of website.\n\n\nSelected academic articles\nSaraswati, C. M., Borghi, E., da Silva Breda, J. J., Flores-Urrutia, M. C., Williams, J., Hayashi, C., ... & McLain, A. C. (2022). Estimating childhood stunting and overweight trends in the European region from sparse longitudinal data. The Journal of Nutrition, 152(7), 1773-1782. doi:10.1093/jn/nxac072.\nSaraswati, C. M., Judge, M. A., Weeda, L. J., Bassat, Q., Prata, N., Le Souëf, P. N., & Bradshaw, C. J. (2024). Net benefit of smaller human populations to environmental integrity and individual health and wellbeing. Frontiers in Public Health, 12, 1339933. doi:10.3389/fpubh.2024.1339933."
  },
  {
    "objectID": "code-collection/2024-04-27-turing-way-handbook/index.html",
    "href": "code-collection/2024-04-27-turing-way-handbook/index.html",
    "title": "The Turing Way Handbook",
    "section": "",
    "text": "Links to The Handbook and GitHub Repository\n\n\n\nThe Turing Way Logo\n\n\nI first came across this project when trying to figure out what version control was and how to use Git. I got what I wanted: the handbook includes chapters on version control, code testing, and continuous integration (including how to set up continuous integration with GitHub Actions). What I loved about this project is they went the extra mile and also explained concepts in research and software reproducibility such as reusable code, and included a chapter on how to communicate your research.\nIt’s an excellent resource for learning about how to set up your projects for reproducibility."
  },
  {
    "objectID": "code-collection/2024-07-25-what-is-the-internet/index.html",
    "href": "code-collection/2024-07-25-what-is-the-internet/index.html",
    "title": "Resources on web development and how the internet works",
    "section": "",
    "text": "It’s interesting how the internet is such a big part of our lives, but less than 24 hours ago I couldn’t tell you what it was, exactly. And I think most people are in this same position. You have a general idea of how the internet works as it relates to you, but you don’t bother diving into the details–just like how you don’t need to understand how an engine works to drive a car. But then I came across an issue that needed me to dive deeper into how the system works, so here is a list of excellent resources that I’ve found helpful.\nFor context, I was (and am still) struggling with adding subdomains to this website and getting each page to correctly link to a subdomain. I would like, for example, for chitra-ms.com/code-collection/ to have the URL code.chitra-ms.com instead. I still haven’t figured out how exactly to go about this, but I ended up going into the following rabbit holes:\nIt’s been a fascinating journey.\nI found that there are a lot of resources out there to learn web development. MOOCs on Coursera and edX; standalone sites such as Codecademy and freeCodeCamp. What I’ve found learning on these platforms, though, is that I end up not learning very much and get frustrated easily. I thought it was the gamification and oversimplification that I found annoying. But then I came across a blog post by Andrew Latta (on Medium, Archive.org) that clearly explains why the journey of learning to code can be so frustrating and explains why these resources aren’t that great once you get to a certain level.\nEnter The Odin Project. This is a different way of learning to program that’s more holistic and teaches you to make your own projects instead of over-simplifying and gamifying your code. It’s excellent for learning about web development and gives you context for why you’re learning the things you’re learning too.\nI continued my web-surfing from The Odin Project to find the following excellent resources on the topic. They’re all clearly written and give excellent explanations. I know I’m using “excellent” a lot, but I really am blown by how well these resources were written and organised–and that we all have free access to these quality resources."
  },
  {
    "objectID": "code-collection/2024-07-25-what-is-the-internet/index.html#resources",
    "href": "code-collection/2024-07-25-what-is-the-internet/index.html#resources",
    "title": "Resources on web development and how the internet works",
    "section": "Resources",
    "text": "Resources\n\nThe Odin Project, which led me to the resources below.\nA guide to how the web works by the Mozilla Developer Network (MDN), which has pages for the following topics:\n\nHow linking works\nHow URLs work\nHow domain names work\nHow a domain name system (DNS) work\n\nBackground information on the web, also by MDN.\nA history of the World Wide Web on Wikipedia.\nHow DNS works: a web-comic."
  },
  {
    "objectID": "code-collection/2024-07-25-what-is-the-internet/index.html#casual-reads",
    "href": "code-collection/2024-07-25-what-is-the-internet/index.html#casual-reads",
    "title": "Resources on web development and how the internet works",
    "section": "Casual reads",
    "text": "Casual reads\n\nTubes: A Journey to the Centre of the Internet by Andrew Blum (Goodreads). An excellent narrative non-fiction that explains the physical reality of the internet.\nComputer Networking: A Top-Down Approach by James F. Kurose and Keith W. Ross (Goodreads). An excellent textbook that explains how the internet works. I like that they provide context for the concepts taught, good examples, and just excellent readability. You can also find James Kurose explaining the internet at five levels (from child to expert) in this video.\n\nI’ll update this list of resources as I dive deeper into my web development journey."
  },
  {
    "objectID": "code-collection/2024-08-30-supercomputer-basics/index.html",
    "href": "code-collection/2024-08-30-supercomputer-basics/index.html",
    "title": "Basics of high-performance computing systems for research",
    "section": "",
    "text": "I’m learning how to run an R workflow on a supercomputer. I’ve not come across supercomputers before and didn’t know how and where to start learning how to use it. It’s been quite the journey and I thought I’d compile this list of resources so anyone else who wants to learn how to use supercomputers can have a friendly guide to get them started.\nBefore I dive into it, I would like to distinguish between using supercomputers and high-performance computing (HPC). These terms (“supercomputing” and “HPC”) are often used interchangeably, as you will see me do in this post, but there is a distinction here in the context of advanced computing. Supercomputers are only a subset of HPCs. HPC is a broader term that encompasses the use of supercomputers and other powerful computing resources to solve advanced computational problems.\nThe following is an opinionated list of what I believe to be the most important concepts to learn when you’re first starting out with HPC. Of course, you can run programs on high-performance computers without necessarily needing to understand the following concepts, especially if you’ve been given pre-written scripts to run your programs. However, I still think it’s helpful to understand the following concepts if you’d like to optimise your HPC usage."
  },
  {
    "objectID": "code-collection/2024-08-30-supercomputer-basics/index.html#hpc-concepts",
    "href": "code-collection/2024-08-30-supercomputer-basics/index.html#hpc-concepts",
    "title": "Basics of high-performance computing systems for research",
    "section": "HPC concepts",
    "text": "HPC concepts\nHere are the concepts that I found most important.\n\nBasic skills in using the Linux command line and a text editor such as Vim.\nUnderstanding the HPC components such as login nodes, compute nodes, and data nodes.\nUnderstanding the job scheduling system, such as Slurm.\nA basic understanding of computer architecture.\nA basic understanding of networking concepts.\n\nLet’s break them down one by one.\n\nLinux command line\nA basic understanding of how to use the command line is useful as you’ll mostly be using the command line when accessing HPCs. When you’re on the command line, you also want to be able to use text editors like Vim or Nano to edit scripts and configuration files.\nResources\n\nThe Linux Command Line by William Shotts (freely available here) is a textbook I really enjoyed. It gives an accessible and friendly explanation of what’s going on. See also my list of command line tips and resources.\nUnix and Linux: Visual QuickStart Guide (4e) by Deborah Ray and Eric Ray (Google Books) is more comprehensive than The Linux Command Line. It describes the whole Unix system, which I found really useful. Pick this up after you feel more comfortable with the command line.\n\n\n\nText editor skills\nMy preferred text editor is Vim. Here are the resources I found most helpful in learning how to use Vim:\n\nA quick introduction to what’s going on when you really have no clue: this guide from the Linux Handbook.\nAn interactive tutorial for learning Vim: OpenVim. I liked this because it allows you to actually see what happens on the screen as you’re typing things out. I preferred this over the game Vim Adventures as 1) you can clearly see the progression of what you’re learning; and 2) it’s free.\nOtherwise you could try out the built-in vimtutor by typing in vimtutor in your terminal (assuming Vim is already installed on your device).\nFor information on how to do more advanced things in Vim, this guide is pretty good.\n\n\n\nHPC components\nIt’s important to understand the components of the supercomputer you’re using so that you have a general idea of how processes and data move between its components. As an example, the following is a simplified and generalised architecture of a supercomputer, courtesy of Pawsey (Pawsey Supercomputing Research Centre 2023).\n\n\n\nGeneral architecture of a supercomputer.\n\n\nIt’s useful to understand how to access the compute nodes and storage nodes from the login node; how to move data to and from the storage system from your local computer; and how to use the job scheduling system, which is the next topic.\n\n\nJob scheduling system (Slurm)\nSlurm is the most widely used job scheduling system for HPC clusters, but there are other job schedulers used too. Familiarise yourself with them.\nI found this to be a good guide to Slurm.\n\n\nComputer architecture\nThe best way to understand how supercomputers work is to understand how computers work to begin with, including computer architecture and computer networks. Specifically, I would want to know how processors, memory, and storage components work.\nI’ll write separate posts on these topics and link them here.\n\n\nNetworking concepts\nSpecifically, a basic understanding of how to use SSH for secure remote access and data transfer.\nFor file transfer tools specifically, I found it useful to understand how to use tools such as scp, sftp, or rsync for transferring data into and out of the HPC system."
  },
  {
    "objectID": "code-collection/2024-08-30-supercomputer-basics/index.html#good-starting-points",
    "href": "code-collection/2024-08-30-supercomputer-basics/index.html#good-starting-points",
    "title": "Basics of high-performance computing systems for research",
    "section": "Good starting points",
    "text": "Good starting points\nIf this is overwhelming: I get it! I only compiled this list after having spent over a month–every day–reading up and watching videos on how to use supercomputers. Here are some other places you could get good information from:\n\nGo to your supercomputing centre’s help page and see if they have user documentation that you can use and a support team you can reach out to. Pawsey, the supercomputing research centre I’m with, has an excellent and comprehensive user support documentation, a Supercomputing User Training playlist, and a responsive support team who helps us optimise our workflow. At one point I just needed to talk to someone and ask for help, so it was really good to have access to the support team.\nGo to other supercomputing centres’ help pages and look at their user documentations and videos. A few of my favourites:\n\nHPC2N (Sweden) have really good written guides. Some of my favourites are their Beginner’s intro to clusters and their explanation of Slurm.\nSciNet HPC at the University of Toronto has excellent YouTube videos. My favourite is their Intro to Advanced Research Computing.\n\nTalk to someone!\n\nI think it’s really helpful to talk to someone who’s used supercomputers before. That way you can: 1) have a general idea of what you need to do, tailored to your workflow; and 2) get an idea of what topic you need to read up on next.\nAlternatively, feel free to drop me a line and I will do my best to help!"
  },
  {
    "objectID": "code-collection/index.html",
    "href": "code-collection/index.html",
    "title": "Code Collection",
    "section": "",
    "text": "List of Vim tips and resources\n\n\n\n\n\n\nresources\n\n\n\nMaking Vim easier to use\n\n\n\n\n\nDec 20, 2024\n\n\n2 min\n\n\n\n\n\n\n\nResources to understand what computers are\n\n\n\n\n\n\ncomputer science\n\n\nresources\n\n\n\nFundamentals of computer science and understanding computer architecture.\n\n\n\n\n\nOct 5, 2024\n\n\n2 min\n\n\n\n\n\n\n\nList of command line tips and resources\n\n\n\n\n\n\nresources\n\n\n\nHow to unleash some command line magic and make things less painful, especially if you’re just starting out.\n\n\n\n\n\nSep 13, 2024\n\n\n2 min\n\n\n\n\n\n\n\nBasics of high-performance computing systems for research\n\n\n\n\n\n\ncomputer science\n\n\nHPC\n\n\n\nHow to orient yourself if you have never used a supercomputer.\n\n\n\n\n\nAug 30, 2024\n\n\n6 min\n\n\n\n\n\n\n\nResources on web development and how the internet works\n\n\n\n\n\n\ncomputer science\n\n\nresources\n\n\n\nGoing down the rabbit hole: debugging my website led to learning about domain names, servers, the World Wide Web, and how the internet works.\n\n\n\n\n\nJul 24, 2024\n\n\n3 min\n\n\n\n\n\n\n\ngit good with RStudio\n\n\n\n\n\n\ngit\n\n\nR\n\n\ncomputer science\n\n\nworkflow\n\n\nresources\n\n\n\ngit-ing started, potential traps if you don’t have a programming background, resources to help you, and bonus: dealing with limited admin rights in Windows.\n\n\n\n\n\nMay 31, 2024\n\n\n7 min\n\n\n\n\n\n\n\nThe Turing Way Handbook\n\n\n\n\n\n\nresources\n\n\n\nAn excellent resource to ensure your research and/or data science projects are reproducible.\n\n\n\n\n\nApr 27, 2024\n\n\n1 min\n\n\n\n\n\n\n\nUnderstanding a {targets} workflow\n\n\n\n\n\n\nR\n\n\nworkflow\n\n\n\nAn introduction to {targets}: why use it, how to use it, and some resources to get you started. (In other words: reduce the mental burden of figuring out which step of the analysis you’re on.)\n\n\n\n\n\nApr 11, 2024\n\n\n9 min\n\n\n\n\n\n\n\nR packages for summary tables in Word\n\n\n\n\n\n\nR\n\n\ndocumentation\n\n\n\nExporting summary tables from R to Word doesn’t have to be painful. Featuring gtsummary, table1, and flextable.\n\n\n\n\n\nAug 21, 2022\n\n\n3 min\n\n\n\n\n\n\n\nFunctional programming\n\n\n\n\n\n\nR\n\n\nfunctional programming\n\n\n\nUsing map instead of for loops is (usually) better for you. (At the very least, you’ll learn a different way of thinking about recursion.)\n\n\n\n\n\nAug 16, 2022\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html",
    "href": "curation/draft-schema-therapy-overview/index.html",
    "title": "Understanding Schema Therapy",
    "section": "",
    "text": "Let me preface this post by saying that I have not formally studied psychology. I’m coming at this as someone who’s generally interested in psychology (an amateur) and has a research background: which means I’m happy to read pop-sci books, textbooks, and academic journals in equal measure; and which also means I have a higher tolerance for jargon-heavy texts.\nHaving said that, I do get bored after reading enough technical texts, so here’s my attempt at summarising what I’ve learnt about schema therapy in an accessible (in other words, interesting) manner. I’ll also list the resources I found most useful in understanding schema therapy.\nIf you find any mistakes in this post, please do leave a comment. I’m cognisant that my position as an amateur in this field means I don’t know what I don’t know."
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#maladaptive-schemas",
    "href": "curation/draft-schema-therapy-overview/index.html#maladaptive-schemas",
    "title": "Understanding Schema Therapy",
    "section": "Maladaptive schemas",
    "text": "Maladaptive schemas\nFor a complete list, I recommend reading (the unfortunately titled) “Reinventing Your Life.”"
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#schema-perpetuation",
    "href": "curation/draft-schema-therapy-overview/index.html#schema-perpetuation",
    "title": "Understanding Schema Therapy",
    "section": "Schema perpetuation",
    "text": "Schema perpetuation"
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#schema-healing",
    "href": "curation/draft-schema-therapy-overview/index.html#schema-healing",
    "title": "Understanding Schema Therapy",
    "section": "Schema healing",
    "text": "Schema healing"
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#healthy-adult",
    "href": "curation/draft-schema-therapy-overview/index.html#healthy-adult",
    "title": "Understanding Schema Therapy",
    "section": "Healthy adult",
    "text": "Healthy adult\nThis part of the self represents the rational, balanced, and adaptive aspect of personality. It is responsible for making mature decisions, setting boundaries, and nurturing oneself."
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#vulnerable-child",
    "href": "curation/draft-schema-therapy-overview/index.html#vulnerable-child",
    "title": "Understanding Schema Therapy",
    "section": "Vulnerable child",
    "text": "Vulnerable child\nThe vulnerable child represents the emotional aspect of personality, particularly the inner child that experienced unmet needs, trauma, or neglect during childhood. This part of the self holds onto emotional pain, fears, and insecurities from the past."
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#adaptive-coping-modes",
    "href": "curation/draft-schema-therapy-overview/index.html#adaptive-coping-modes",
    "title": "Understanding Schema Therapy",
    "section": "Adaptive coping modes",
    "text": "Adaptive coping modes\nCompliance, avoidance, and overcompensation\nCoping modes developed to protect the vulnerable child from experiencing further pain and distress."
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#dysfunctional-coping-modes",
    "href": "curation/draft-schema-therapy-overview/index.html#dysfunctional-coping-modes",
    "title": "Understanding Schema Therapy",
    "section": "Dysfunctional coping modes",
    "text": "Dysfunctional coping modes\nSurrender, avoidance, and overcompensation\nCoping modes that serve to perpetuate negative patterns of behaviour."
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#general-audience-self-help",
    "href": "curation/draft-schema-therapy-overview/index.html#general-audience-self-help",
    "title": "Understanding Schema Therapy",
    "section": "General audience (self-help)",
    "text": "General audience (self-help)\nThe following books are well-written and accessible to people who haven’t studied psychology.\n\nReinventing Your Life: The breakthrough program to end negative behaviour and feel great again by Jeffrey E. Young and Janet S. Klosko (goodreads)\nBreaking Negative Thinking Patterns: A schema therapy self-help and support book by Gitta Jacob, Hannie van Genderen and Laura Seebauer (goodreads)"
  },
  {
    "objectID": "curation/draft-schema-therapy-overview/index.html#deep-dive",
    "href": "curation/draft-schema-therapy-overview/index.html#deep-dive",
    "title": "Understanding Schema Therapy",
    "section": "Deep dive",
    "text": "Deep dive"
  },
  {
    "objectID": "curation/index.html",
    "href": "curation/index.html",
    "title": "Curation",
    "section": "",
    "text": "My favourite yoga videos\n\n\n\n\n\n\nyoga\n\n\n\nA list for future reference: handy for when I feel like doing YouTube yoga but can’t figure out which video to pick.\n\n\n\n\n\nApr 26, 2024\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html",
    "href": "recipes/2024-04-03-carrot-cake/index.html",
    "title": "Carrot cake (and frostings)",
    "section": "",
    "text": "Adapted from Snacking Cakes by Yossy Arefi\nIngredients\n\n95g all-purpose flour\n65g whole wheat flour1\n1.5 teaspoons baking powder\n0.5 teaspoons bicarb soda\n85g sugar\n2 large eggs\n155g neutral oil2\n2 teaspoons ground cardamom\n2 teaspoons ground cinnamon\n1 teaspoon ground nutmeg\n3/4 teaspoon salt\n225g peeled and grated carrots3\n60g chopped pitted dates\n75g chopped toasted pecans4\n\nMethod\n\nPreheat oven to 175°C fan-forced. Butter or coat an 8in/20x20cm baking pan5 with non-stick spray. Line pan with a strip of parchment paper that hangs over two of the edges.\nIn a medium-sized bowl, sift all-purpose flour, whole wheat flour, baking powder, and bicarb soda. Whisk or mix until well-distributed.\nIn a separate medium-sized bowl, add sugar and eggs. Whisk or mix the mixture until pale and foamy (1m by hand, ~15s by electric mixer; careful not to overmix). Add oil, cardamom, cinnamon, nutmeg, and salt. Continue whisking/mixing until smooth and emulsified.\nAdd dry ingredients to the liquid mixture. Whisk (or use rubber spatula to mix) until well-combined and smooth. Then use rubber spatula to fold in grated carrots, dates, and pecans.\nPour batter into prepared pan. Tap pan gently to release any air bubbles and smooth top of batter.\nBake cake in middle rack of oven until puffed and golden and tester/skewer/butter knife inserted into the center comes out clean–30-40 minutes. Set pan on a rack to cool for ~15 minutes then use the parchment paper to lift the cake out of the pan and set it on the rack to cool completely.\nStore the cake, well-wrapped, at room temperature for up to 3 days. This cake also freezes well."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-whipped-cream-frosting",
    "href": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-whipped-cream-frosting",
    "title": "Carrot cake (and frostings)",
    "section": "Cream cheese and whipped cream frosting",
    "text": "Cream cheese and whipped cream frosting\n\n125g softened cream cheese (left out at room temperature for ~30m-1h)\n30g confectioners’ sugar\n150g cream\n2 teaspoons vanilla extract\n\nMethod\n\nTake a cold bowl (I place it in the freezer for 15-30m prior to using) and place cream cheese and sugar in bowl.\nMix with electric mixer until well-combined.\nAdd vanilla extract to mixture.\nEither slowly add cream or mix it into the mixture in two batches. Mix with electric mixer until soft peaks form; careful not to overmix.\nSpread onto cake when cake has completely cooled (cake has preferably been chilled in the fridge)."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#lemon-glaze",
    "href": "recipes/2024-04-03-carrot-cake/index.html#lemon-glaze",
    "title": "Carrot cake (and frostings)",
    "section": "Lemon glaze",
    "text": "Lemon glaze\n\n1 lemon\n100g confectioners’ sugar\n1T finely grated carrot\n\nMethod\n\nFinely zest lemon into a medium bowl. Juice the lemon, and set aside lemon juice.\nAdd confectioners sugar and finely grated carrot to bowl with zest along with 4tsp of the lemon juice. Whisk vigorously until smooth.\nAdd more lemon juice as needed to make a thick but pourable glaze.\nPour glaze over cooled cake and let it set for a few minutes before serving."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-butter-frosting",
    "href": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-butter-frosting",
    "title": "Carrot cake (and frostings)",
    "section": "Cream cheese and butter frosting",
    "text": "Cream cheese and butter frosting\n\n250g cream cheese at room temperature\n100g unsalted butter at room temperature\n150g powdered/confectioners’ sugar\n1T vanilla extract"
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-coconut-frosting",
    "href": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-coconut-frosting",
    "title": "Carrot cake (and frostings)",
    "section": "Cream cheese and coconut frosting",
    "text": "Cream cheese and coconut frosting\nDorie Greenspan’s\n\n250g cream cheese at room temperature\n113g (I think I used less) unsalted butter at room temperature\n450g confectioners’ sugar\n1T fresh lemon juice\n½ c shredded coconut, optional\nToasted finely chopped nuts and/or toasted coconut, for topping, optional\n\nMethod\n\nBeat cream cheese and butter together until smooth and creamy.\nGradually add the confectioners’ sugar and continue to beat until the frosting is velvety smooth.\nBeat in the lemon juice.\nStir coconut in with rubber spatula."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#footnotes",
    "href": "recipes/2024-04-03-carrot-cake/index.html#footnotes",
    "title": "Carrot cake (and frostings)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPreference for safflower oil but canola or rapeseed can also be used.↩︎\nThis can be substituted with all-purpose flour or any other whole-grain flour; preference for whole wheat for nuttiness↩︎\nPreference for coarsely grated carrots; finely grated carrots leads to smoother, generic cakey texture↩︎\nPreference for toasted pecans: either grill for 2m or pop them in the oven whilst it’s preheating, taking them out when they are golden and fragrant (~10m). The latter is preferable as less likely to burn.↩︎\nOther pans: a) cupcake tins: 12-18m; b) 9-in round pan: 30-40m↩︎"
  },
  {
    "objectID": "recipes/2024-04-21-masala-chai/index.html",
    "href": "recipes/2024-04-21-masala-chai/index.html",
    "title": "Masala chai",
    "section": "",
    "text": "Adapted from Dishoom: From Bombay with love (goodreads). Serves 4.\nIngredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-04-21-masala-chai/index.html#footnotes",
    "href": "recipes/2024-04-21-masala-chai/index.html#footnotes",
    "title": "Masala chai",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI find any Assam will work well. All you want is a strong, dark, and robust blend. I’ve also used Yorkshire tea successfully. Lipton tea bags are OK in a pinch, I guess, but I find the resulting chai lacking in flavour. If you must, use more tea bags.↩︎"
  },
  {
    "objectID": "recipes/2024-04-29-banana-bread/index.html",
    "href": "recipes/2024-04-29-banana-bread/index.html",
    "title": "Banana bread",
    "section": "",
    "text": "Ingredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-04-29-banana-bread/index.html#footnotes",
    "href": "recipes/2024-04-29-banana-bread/index.html#footnotes",
    "title": "Banana bread",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI’ve found that it doesn’t really matter how much banana you put in as this recipe is quite forgiving.↩︎\nThe ripeness of the bananas, on the other hand, is crucial. The riper (in other words, the more brown and smelling of fermentation) the better.↩︎\nSubstitute up to 35 g with dark brown sugar for a deeper caramelised flavour.↩︎\nSubstitute up to 150 g with whole-wheat flour, otherwise it could be quite dense (up to you, of course, but I prefer my banana breads fluffy).↩︎"
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html",
    "title": "Beef noodle salad",
    "section": "",
    "text": "Serves 4. Adapted from David Tanis’ Vietnamese Lemongrass Beef and Noodle Salad on NYT Cooking."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#all-ingredients",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#all-ingredients",
    "title": "Beef noodle salad",
    "section": "All ingredients",
    "text": "All ingredients\nDipping sauce\n\n5 tablespoons light brown sugar (separated: 4+1)\n3 tablespoons rice vinegar\n4 tablespoons lime juice (from two large limes, or use bottled)\n6 tablespoons fish sauce1 (separated: 4+2)\n5 garlic cloves - minced (separated: 2+3)\n3 cm piece of ginger - peeled and minced\n2 chillies - chopped\n\nSalad\n\n340 g rice vermicelli noodles\n1 head lettuce\n1 medium carrot\n1 small cucumber\n1 daikon radish\nA handful of bean sprouts\n\nBeef stir-fry\n\n500 g beef - sliced thinly (less than 1 cm thick)\n80g lemongrass paste or 3 tablespoons lemongrass - tender centres finely chopped2\nVegetable oil - for stir-frying\n\nGarnish\n\nBunch coriander\nBunch mint leaves\n4 tablespoons crushed roasted peanuts"
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#make-the-dipping-sauce",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#make-the-dipping-sauce",
    "title": "Beef noodle salad",
    "section": "(1) Make the dipping sauce",
    "text": "(1) Make the dipping sauce\nGrab the following ingredients:\n\n4 tablespoons light brown sugar\n3 tablespoons rice vinegar\n4 tablespoons lime juice (from two large limes, or use bottled)\n4 tablespoons fish sauce\n2 garlic cloves - minced\n3 cm piece of ginger - peeled and minced\n2 chillies - chopped\n\nPut them all in a bowl, stir to combine, then let sit for at least 15 minutes."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-noodles",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-noodles",
    "title": "Beef noodle salad",
    "section": "(2) Prep the noodles",
    "text": "(2) Prep the noodles\nWhilst the sauce is marinating, let’s prepare the noodles.\n\n340 g rice vermicelli noodles\n\nBoil some water in a large pot. When water has boiled, add the noodles to the pot. Cook according to package directions. Once cooked, drain the water and run the noodles under a tap of cold water. Let sit to cool."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-beef",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-beef",
    "title": "Beef noodle salad",
    "section": "(3) Prep the beef",
    "text": "(3) Prep the beef\nWhile the noodles are cooling down, we’ll prepare the beef. Grab the following:\n\n500 g beef - sliced thinly (less than 1 cm thick)\n2 tablespoons fish sauce\n1 tablespoon light brown sugar\n3 garlic cloves - minced\n80g lemongrass paste or 3 tablespoons lemongrass - tender centres finely chopped\n\nCombine all the above in a bowl and let sit to marinate for at least 15 minutes."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-salad",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-salad",
    "title": "Beef noodle salad",
    "section": "(4) Prep salad",
    "text": "(4) Prep salad\nWhilst the beef is marinating, we’ll prepare the salad. Grab the salad ingredients:\n\n1 head lettuce - yummy leaves washed and separated\n1 medium carrot - cut and julienned3\n1 small cucumber - cut and julienned\n1 daikon radish - cut and julienned\nA handful of bean sprouts\n\n\nWith the lettuce, separate the tender leaves and wash them. Leave to dry.\nJulienne the carrot, cucumber, and daikon. Set aside.\nBlanch the bean sprouts in boiling water, or leave them raw."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#stir-fry-beef",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#stir-fry-beef",
    "title": "Beef noodle salad",
    "section": "(5) Stir-fry beef",
    "text": "(5) Stir-fry beef\nLet’s stir-fry the beef now. Grab the following:\n\nMarinated beef from Section 3 above\nVegetable oil - for stir-frying\n\nPour in a tablespoon of vegetable oil in the frying pan and heat up on medium-high heat. Once pan is heated, cook the marinated beef in batches, making sure you don’t overcrowd the pan. Once you’ve cooked all the beef, set aside."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#all-together-now",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#all-together-now",
    "title": "Beef noodle salad",
    "section": "(6) All together, now",
    "text": "(6) All together, now\nNow, to put them all together.\n\nBunch coriander\nBunch mint leaves\n4 tablespoons crushed roasted peanuts\n\n\nIn your serving bowls: add the cooled rice noodles and the salad (lettuce, carrots, cucumbers, and daikon strips).\nPour the dipping sauce from Section 1 on top of the salad.\nAdd the beef on top of the salad.\nGarnish with coriander, mint leaves, and crushed peanuts."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#notes",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#notes",
    "title": "Beef noodle salad",
    "section": "Notes",
    "text": "Notes\nDon’t let the amount of ingredients intimidate you. It is more ingredients than your average dish, but most of them are pantry items (assuming you do a lot of Asian-style cooking). The preparation itself is simple. It takes me about 45 minutes to make at a leisurely pace, including all the chopping.\nI also like to substitute the beef with chicken or pork, cooked with the same lemongrass marinade. I haven’t figured out how to substitute with tofu.\nThe name of this salad is Bun Bo Xao."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#footnotes",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#footnotes",
    "title": "Beef noodle salad",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUse good quality fish sauce. In Australia, I prefer Squid or Red Boat. See this blog post for what makes a good fish sauce.↩︎\nI would use canned or lemongrass hearts as the middles can be hard to chop when fresh or frozen.↩︎\nIn other words, matchsticks. For instructions, see this Serious Eats guide.↩︎"
  },
  {
    "objectID": "recipes/2024-07-14-sweet-corn-soup/index.html",
    "href": "recipes/2024-07-14-sweet-corn-soup/index.html",
    "title": "Sweet corn egg-drop soup",
    "section": "",
    "text": "Serves 6 as a side dish or entree.\nIngredients\n\n0.5 to 1 tablespoon canola oil\n1 bunch spring onions, separated: white parts chopped finely and green parts sliced\n2 teaspoons minced garlic\n1 teaspoon minced ginger\n500 ml chicken stock, good quality\n1 can sweet corn, separated: half the sweet corn as is, and half well-blended with water from the can\n1 carrot, small dice\n50 g chicken, chopped finely (or minced)\nA dash of soy sauce\nA pinch of salt\n3-4 eggs, whisked\nA pinch of white pepper (substitute with black pepper)\n3 teaspoons cornstarch or cornflour\n2 tablespoons cold water\nA dash of sesame oil\n\nYou’ll also need\n\nA medium-sized saucepan or pot\nA hand-held blender (optional)\n\nMethod\n\nAdd oil to the bottom of your saucepan or pot and place on medium-high heat. When the oil is hot, add the whites of the spring onions and stir until they turn translucent, about 1-2 minutes. Add the garlic and ginger next and stir until fragrant.\nTurn heat to low and add the chicken stock. Turn the heat back up to medium-high until the chicken stock bubbles. Once it bubbles, turn heat down until it stays at a gentle simmer.\nAdd the whole sweet corn, blended sweet corn, carrots, and chicken.\nCook until the soup returns to a gentle simmer and the chicken pieces are cooked. Top up with water as needed if you feel that the soupr has reduced too much. Adjust flavour to taste with soy sauce and salt, adding as much as you think you need.\nTo add the egg-drop streaks, nsure your soup is still at a gentle simmer, about medium-high heat. Whisk the eggs in a separate bowl, adding a dash of soy sauce and a pinch of salt. EHold the bowl with one hand and with your other hand, stir the soup in one direction–say clockwise–until the liquid becomes like a whirlpool. Whilst stirring, add the eggs to outer edges of the pan so it gets swirled in the whirlpool. Continue stirring until you’ve added all your eggs.\nAdd the pinch of white pepper and adjust the flavours with salt and soy sauce, adding as much as you think it needs. I prefer the soup to be savoury with a little bit of salty, balancing it with the sweetness of the corn.\nWhen you are happy with the flavour, whisk the cornstarch with cold water in a small bowl. Add this mixture to the soup whilst stirring, and allow the soup to come back to a boil. If the soup is still too think, add more cornstarch slurry to the soup, making sure you are continuously stirring the soup to avoid clumping.\nOnce you are happy with the thickness, take the soup off the heat and add a dash of sesame oil, stirring it in. Garnish with the sliced greens of the spring onions and serve immediately.\n\nNotes\nIf you’re going to freeze or refrigirate the soup, wait until you are reheating the soup before adding in the cornstarch slurry."
  },
  {
    "objectID": "recipes/2024-09-26-kanelsnurrer/index.html",
    "href": "recipes/2024-09-26-kanelsnurrer/index.html",
    "title": "Kanelsnurrer",
    "section": "",
    "text": "Adapted from the Nordic Baking Book by Magnus Nilsson. Makes about 15 large buns.\nIngredients\nFilling\nDecoration\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-09-26-kanelsnurrer/index.html#notes",
    "href": "recipes/2024-09-26-kanelsnurrer/index.html#notes",
    "title": "Kanelsnurrer",
    "section": "Notes",
    "text": "Notes\nThese buns are best eaten the day they are baked; they get rather dry after 24 hours. If you must store them, spray with a little bit of water before you’re about to eat it and microwave for 10-20 seconds on medium."
  },
  {
    "objectID": "recipes/2024-09-26-kanelsnurrer/index.html#footnotes",
    "href": "recipes/2024-09-26-kanelsnurrer/index.html#footnotes",
    "title": "Kanelsnurrer",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn a large bowl (larger than you think you’ll need), crack the egg and add about half the quantity of milk. Whisk vigorously until well-combined.↩︎"
  },
  {
    "objectID": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html",
    "href": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html",
    "title": "Understanding a {targets} workflow",
    "section": "",
    "text": "I was recently introduced to the R package {targets} as part of learning how to develop software. As I continue to use it, I’ve been blown away by how much easier my workflow has become—even outside of software development—and I regret not having known of it sooner. It would have been nice to use this workflow when I was doing my Master’s thesis, which involved a large amount of complex and repeated analyses. So here’s my notes on the targets workflow so far: why use it, how to use it (especially if you’ve never used it before), and the resources I found most useful."
  },
  {
    "objectID": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#why-use-a-targets-workflow",
    "href": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#why-use-a-targets-workflow",
    "title": "Understanding a {targets} workflow",
    "section": "Why use a targets workflow?",
    "text": "Why use a targets workflow?\nMost of us doing statistical analysis work on complex projects with moving parts. What I mean by this is: say I have a workflow that involves loading the data, some exploratory data analysis, fitting the data to a model, generating a plot of the data and the fitted model, and presenting the model coefficients in a table. It’s nothing too complicated, but it is complex: if one part changes, the rest of the project changes too.\nFor example, perhaps the data is updated and we want to re-run the whole analysis from start to finish. Or perhaps we decide that the model isn’t a good fit, so we fit a few other models and see which one is better; in this instance, only the model, plot, and table would change, but the rest of the project stays the same.\nAll this is fine if you have well-annotated code and know which parts of the script to re-run. But what if you accidentally run the wrong parts of the script that are computationally intensive and time-consuming? Or what if it takes a while to re-render your table because you’ve included so many variables, and you really didn’t have to because you only wanted the plot and not the table? Or even if you’re just tweaking a few variables and then making a plot: if you miss re-naming a variable earlier on in your script, your plot might not be generated correctly because it depends on that variable.\nIt’s in situations like these where {targets} can help you. Using a targets workflow means you’ll have it all laid out in front of you instead of needing to look for specific bits of code in your script and any dependencies. It’ll take the headache out of figuring out which parts of the analysis depends on which variables and functions. Then when you change a variable name (or any part of the project, really), you’ll know which parts of the analysis would need to be re-run, minus the headaches.\nTo summarise, I find a targets workflow especially useful in the following scenarios:\n\nif you’re doing something complex that has a lot of moving parts;\nif said moving parts will change as your project progresses; and/or\nif you’d like to re-run your analysis with different inputs (e.g. a new dataset), or to create different outputs (e.g. plots and tables)—especially if you’re re-running your analysis a lot!"
  },
  {
    "objectID": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#how-to-use-targets",
    "href": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#how-to-use-targets",
    "title": "Understanding a {targets} workflow",
    "section": "How to use targets",
    "text": "How to use targets\nWhen you’re first starting to program in R—especially if you’re mainly doing statistical analysis—a targets workflow might seem an unnecessarily complex way of going about things. When I first came across the targets workflow, I felt overwhelmed and didn’t understand how it could be useful for my workflow. So the way I’d recommend going about it is to take an existing project, and to convert the scripts in that project into a targets workflow.\nThe quick walkthrough in the user manual is an excellent example of how to use the targets workflow–I highly recommend reading it and going through the worked example. It does a much better job than I can in giving a reproducible example of how to use targets. Then I recommend converting your project to a targets workflow by using that walkthrough, or this quick tutorial.\nI’ll walk you through a conceptual overview of how I use targets. However, I highly recommend you first work through the two tutorials above."
  },
  {
    "objectID": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#an-example-workflow",
    "href": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#an-example-workflow",
    "title": "Understanding a {targets} workflow",
    "section": "An example workflow",
    "text": "An example workflow\nSo you can follow along, I’ve created a repo that demos a simple targets workflow here.\nFirst, I make sure that I understand my workflow from beginning to end. This overview is the main advantage of using a targets workflow: you’ll have a bird’s eye view of your analysis and figure out where changes are necessary. In this example, I’ve broken down my analysis to the following steps:\n\nread in csv file of data;\nsummarise data and generate a table;\nfit models; and finally,\ngenerate a plot of the data and fitted model.\n\nOnce I’ve done that and would like to start creating a targets workflow, I’ll run the following in my console:\n\nlibrary(targets)\nlibrary(tarchetypes)\n\ntar_script()\n\nThis creates a file in your project directory called _targets.R. This is the high-level overview of the project, so I open that and write out something like the following:\n\n# _targets.R file\n\n# Set-up ------------------------------\n\nlibrary(targets)\nlibrary(tarchetypes)\n\n# Load packages needed for this project\ntar_option_set(\n  packages = c(\"tidyverse\",\n               \"purrr\")\n  )\n\n# Set up a workspace when our code errors\ntar_option_set(workspace_on_error = TRUE)\n\n# Load functions to be used in our project\nsource(\"R/functions.R\")\n\n# Target objects ------------------------------\n\ntar_plan(\n  \n  # Load data\n  tar_file(\n    path_to_data,\n    \"./raw/data.csv\"\n    ),\n    \n  tar_target(\n    data,\n    read_csv(path_to_data)\n  ),\n  \n  # Create a summary table\n  tar_target(\n    data_summary_table,\n    summarise_data(data)\n  ),\n  \n  # Fit a model to the data\n  tar_target(\n    model,\n    model_data(data)\n  ),\n  \n  # Create plot of the data and fitted model\n  tar_target(\n    plot,\n    plot_data_with_model(data)\n  ),\n\n  # Create table of model coefficients\n  tar_target(\n    table_of_model,\n    tabulate_model(model)\n  )\n  \n)\n\nWhere summary_table, model_data, plot_data, and table_of_model are functions I’ve written up myself and saved in a separate script called functions.R.\nThe advantage of this workflow is you can change the one part that need changing in your workflow, and the {targets} package will change the rest for you. I can’t emphasise how life-changing this was for me.\nHere’s an example. If your data changes, you just need to change the first target object path_to_data to point to the new data file. You can then re-run the whole analysis using tar_make() and your resulting summary table, fitted model, plot, and table of model coefficients will be re-created with the new data you’ve pointed to. This is so much easier than having a script and needing to change data to new_data for every instance in which it’s referred to, or by re-running the whole script yourself. How convenient is that?\nYou can also have an overview of your workflow and what needs to be updated by running tar_visnetwork()."
  },
  {
    "objectID": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#final-thoughts",
    "href": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#final-thoughts",
    "title": "Understanding a {targets} workflow",
    "section": "Final thoughts",
    "text": "Final thoughts\nUsing a targets workflow requires you to change the way you approach programming. If you’re trained as a statistical programmer, I assume you’re used to writing your code in scripts. A targets workflow requires you to write your code as functions instead (otherwise known as “functional programming”).\nIt is a steep learning curve and it did take me a while to get my head around why and how I should use a targets workflow. It’s a different way of thinking about how to program.\nDespite this, I do highly recommend using a targets workflow instead of having multiple R scripts, for all the reasons I’ve stated above. Utilising this workflow is a step towards reproducible research, which is always great."
  },
  {
    "objectID": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#resources-for-learning-targets",
    "href": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html#resources-for-learning-targets",
    "title": "Understanding a {targets} workflow",
    "section": "Resources for learning targets",
    "text": "Resources for learning targets\nI think the best way to understand why a targets workflow is useful is to actually do a project within a targets workflow. So here are some resources I found helpful:\n\nThe targets R package user manual with a quick walkthrough to get you started. I highly recommend this one if you’re trying to set up a targets workflow by yourself.\nFor a more hands-on tutorial, I recommend this Carpentries workshop by Joel Nitta. I really liked that this gave you a bare-bones overview of what a targets workflow looks like. I used this the first time I tried to set up a targets workflow, but I also had the benefit of having someone walk me through using targets.\n\nMore readings on targets:\n\nThe official targets website\nWithin the official website: a list of examples for targets workflows"
  },
  {
    "objectID": "code-collection/2022-08-21-packages-for-summary-tables/index.html",
    "href": "code-collection/2022-08-21-packages-for-summary-tables/index.html",
    "title": "R packages for summary tables in Word",
    "section": "",
    "text": "A big part of what I do day-to-day is to provide a report of summary statistics. The researchers I work with would usually want this report in the format of a Word document (.docx) as it is (unfortunately) still the most widely used word processing software.\nI much prefer markdown and TeX files for reports, but you have to work to your audience. This is how I went down the rabbit hole of trying to find an R package that outputs summary tables into Word documents. So far I’ve found that gtsummary and table1 combined with the flextable package does the job best.\nAnother package that’s been brought to my attention is stargazer, but alas it only outputs to html. So I’ll walk you through a reproducible example of how to use the gtsummary and table1 packages to create aesthetically pleasing summary tables in Word, supported by the flextable package.\n\nUsing gtsummary\nLet’s create a table for the mtcars data, grouping by engine type (V-shaped vs straight). Here’s how we’d do it using the gtsummary package:\n\nlibrary(gtsummary)\n\nmtcars %&gt;%\n  select(mpg, cyl, disp, am, vs) %&gt;% \n  tbl_summary(by = vs)\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\n0, N = 181\n1, N = 141\n\n\n\n\nmpg\n15.7 (14.8, 19.1)\n22.8 (21.4, 29.6)\n\n\ncyl\n\n\n\n\n\n\n    4\n1 (5.6%)\n10 (71%)\n\n\n    6\n3 (17%)\n4 (29%)\n\n\n    8\n14 (78%)\n0 (0%)\n\n\ndisp\n311 (276, 360)\n121 (83, 162)\n\n\nam\n6 (33%)\n7 (50%)\n\n\n\n1 Median (IQR); n (%)\n\n\n\n\n\n\n\n\nNot bad–and it plays well with the tidyverse. I also like that gtsummary tends to be smart about how the results should be displayed. For example, the cyl and am variables were automatically treated as discrete instead of continuous variables (thus giving us counts and percentages instead of median and IQR). You’ll notice that if you have the levels of a categorical variable as 0 and 1 (as in am), gtsummary provides only the count and percentage for the values coded as 1, which I’d argue eliminates redundancy.\n\n\nUsing table1\nNow, let’s use the table1 package:\n\nlibrary(table1)\n\ntable1(~ mpg + factor(cyl) + disp + factor(am) | factor(vs),\n       data = mtcars)\n\n\n\n\n\n\n\n\n\n\n\n\n0\n(N=18)\n1\n(N=14)\nOverall\n(N=32)\n\n\n\n\nmpg\n\n\n\n\n\nMean (SD)\n16.6 (3.86)\n24.6 (5.38)\n20.1 (6.03)\n\n\nMedian [Min, Max]\n15.7 [10.4, 26.0]\n22.8 [17.8, 33.9]\n19.2 [10.4, 33.9]\n\n\nfactor(cyl)\n\n\n\n\n\n4\n1 (5.6%)\n10 (71.4%)\n11 (34.4%)\n\n\n6\n3 (16.7%)\n4 (28.6%)\n7 (21.9%)\n\n\n8\n14 (77.8%)\n0 (0%)\n14 (43.8%)\n\n\ndisp\n\n\n\n\n\nMean (SD)\n307 (107)\n132 (56.9)\n231 (124)\n\n\nMedian [Min, Max]\n311 [120, 472]\n121 [71.1, 258]\n196 [71.1, 472]\n\n\nfactor(am)\n\n\n\n\n\n0\n12 (66.7%)\n7 (50.0%)\n19 (59.4%)\n\n\n1\n6 (33.3%)\n7 (50.0%)\n13 (40.6%)\n\n\n\n\n\n\n\nOne could argue that the formula format is a bit tedious as you can’t select the variables (for example, from a list or vector), but I find that you usually need to be cognisant of which variables you want included in a summary table anyways so this isn’t much of a problem for me. I also prefer how it looks as it fits more into the format of a ‘Table 1’ for scientific publishing (hence the package name).\nI did however have to wrap the cyl and am with factor() as table1 does not automatically treat these numeric variables as categorical variables.\n\n\nExporting using flextable\nNow let’s export these tables into Word. First you have to save your table as a flextable object. You do this by either using the as_flex_table() function for a gtsummary object, or the t1flex() function for a table1 object. Once you’ve done that, save_as_docx() saves the table into a Word document which you can copy and paste. Here’s how it would look:\n\n# For gtsummary\ntable &lt;- mtcars %&gt;%\n  select(mpg, cyl, disp, am, vs) %&gt;% \n  tbl_summary(by = vs)\n\nas_flex_table(table) %&gt;% \n  save_as_docx(path = \"./gtsummary.docx\")\n\n# For table1\ntable &lt;- table1(~ mpg + factor(cyl) + disp + factor(am) | factor(vs),\n       data = mtcars)\n\nt1flex(table) %&gt;% \n  save_as_docx(path = \"./table1.docx\")\n\nflextable also supports exporting to HTML, PDF, and PowerPoint documents; it also supports rendering tables as graphic files (such as png and jpeg).\n\n\nAdditional notes\nYou can add content to Word and PowerPoint documents using the officer package, but I haven’t used it before–my end users usually just copy-and-paste the tables. This is a package I’d like to look into."
  },
  {
    "objectID": "code-collection/2024-12-20-vim-shortcuts/index.html",
    "href": "code-collection/2024-12-20-vim-shortcuts/index.html",
    "title": "Cheatsheet of Vim shortcuts",
    "section": "",
    "text": "This is a cheatsheet of the commands I most frequently use for Vim. For a beginner’s guide to Vim, refer to my post Starting Vim.\n\nNecessary commands\n\nGoing into the Insert mode:\n\ni starting before the current cursor position\na starting after the current cursor position\no adds a new blank line after the current cursor position and goes into the insert mode\n\nu undo last edit\nctrl + r redo\nExiting vim:\n\n:w write file\n:q quit, assuming you haven’t made any changes in the file\n:x or :wq write file, then quit\n\n\n\n\nFinding things\n\nf + pattern goes to the next instance of pattern in that line\n/pattern searches forward from the current cursor position for the text matching pattern. Press /, type the search term (pattern), and press Enter.\n\nTo search for the word “example”: first, ensure you are in Normal mode by pressing esc. Then type /example and press Enter.\nTo navigate search results, n moves to the next occurrence of the search pattern.\nN moves to the previous occurrence of the search pattern.\n\n?pattern searches backward from the current cursor position for the text matching pattern. Press ?, type the search term (pattern), and press Enter.\n\nTo search backward for the word “example”, you would type ?example in Normal mode and press Enter.\n\n\n\n\nMoving around the line\n\n^ or 0 goes to the beginning of the line\n$ goes to the end of the line\ngg goes to the beginning of the line\n\n\n\nMoving around the file\n\n:0 goes to line zero\n:135 goes to line 135\n:+5 goes 5 lines forward\n:-5 goes 5 lines backward\nG goes to the last line of the file\n\n\n\nText editing\n\ndd delete current line\nd$ or D deletes from current cursor position to the end of the line"
  },
  {
    "objectID": "code-collection/2024-12-03-starting-vim/index.html",
    "href": "code-collection/2024-12-03-starting-vim/index.html",
    "title": "Starting Vim",
    "section": "",
    "text": "Vim is a text editor; that’s all it does. You can’t format a document, insert shapes, make a table with lines, use multiple fonts, highlight sentences, or print out with headings or margins. Vim, however, is very good at editing text. Once you’ve mastered Vim, it is very powerful. You can find and replace chunks of text using commands, copy and paste columns of data, and jump to a specified line number–all with a couple of keystrokes.\n\n\n\n\n\n\nWhat is a text editor?\n\n\n\nWe sometimes call programs like Microsoft Word or LibreOffice Writer “text editors”, but we need to be a bit more careful when it comes to programming.\nBy default, Microsoft Word uses .docx files to store not only text, but also formatting information about fonts, headings, and so on. This extra information isn’t stored as characters, and doesn’t mean anything to tools like head: they expect input files to contain nothing but the letters, digits and punctuation on a standard computer keyboard. When editing programs, therefore, you must either use a plain text editor, or be careful to save files as plain text.\n\n\nVim is also everywhere. If you are working on a computer with a shell (such as terminal or gitbash), then you have Vim; it’s already there. And you can open it directly from the shell. The problem is, however, that Vim is notoriously difficult to learn.\nLet’s create a new file with Vim. First, open your shell, then type:\nvim new-file.txt\nYay, a new file! Now, close that file. Type:\n:q\nTa-da! Congratulations, you’ve exited vim."
  },
  {
    "objectID": "code-collection/2024-12-03-starting-vim/index.html#starting-vim",
    "href": "code-collection/2024-12-03-starting-vim/index.html#starting-vim",
    "title": "Starting Vim",
    "section": "",
    "text": "Vim is a text editor; that’s all it does. You can’t format a document, insert shapes, make a table with lines, use multiple fonts, highlight sentences, or print out with headings or margins. Vim, however, is very good at editing text. Once you’ve mastered Vim, it is very powerful. You can find and replace chunks of text using commands, copy and paste columns of data, and jump to a specified line number–all with a couple of keystrokes.\n\n\n\n\n\n\nWhat is a text editor?\n\n\n\nWe sometimes call programs like Microsoft Word or LibreOffice Writer “text editors”, but we need to be a bit more careful when it comes to programming.\nBy default, Microsoft Word uses .docx files to store not only text, but also formatting information about fonts, headings, and so on. This extra information isn’t stored as characters, and doesn’t mean anything to tools like head: they expect input files to contain nothing but the letters, digits and punctuation on a standard computer keyboard. When editing programs, therefore, you must either use a plain text editor, or be careful to save files as plain text.\n\n\nVim is also everywhere. If you are working on a computer with a shell (such as terminal or gitbash), then you have Vim; it’s already there. And you can open it directly from the shell. The problem is, however, that Vim is notoriously difficult to learn.\nLet’s create a new file with Vim. First, open your shell, then type:\nvim new-file.txt\nYay, a new file! Now, close that file. Type:\n:q\nTa-da! Congratulations, you’ve exited vim."
  },
  {
    "objectID": "code-collection/2024-12-03-starting-vim/index.html#text-editing",
    "href": "code-collection/2024-12-03-starting-vim/index.html#text-editing",
    "title": "Starting Vim",
    "section": "Text editing",
    "text": "Text editing\nSo, you’ve created and exited a file with Vim. Your next challenge is to put some text inside the file. Open your file again:\nvim new-file.txt\nNow, try and type some text. What’s happening? You are currently in Normal (or ‘control’) mode. To add text, you need to be in Insert or ‘edit’ mode.\nTo enter Insert mode, type i. You can now type! Add some text:\nYey I can now add words to my file! This wasn't difficult at all!\nHow do you save your work? Ctrl + s will not help you. First, you need to go back to Normal mode by pressing Esc, then type:\n:w\n(If you spend too much time working in Vim, your text documents start to accumulate random :w in them.) Now, you can safely quit vim again:\n:q\nPractice this. Re-open your vim document, enter insert mode, and add some more random text.\nThere is also a command for saving and exiting all in one instruction. Press Esc, then type:\n:x\nPhew! You had little control over where your new text went in the last exercise. How do you move around in vim? In Normal mode, you can move one character at a time using your arrow keys, or the keys K (up), L (right), H (left), and J (down).\nOnce you are in place, type i to enter Insert mode on the left-hand-side of the current character. You can also type a to enter Insert mode on the right-hand-side (think (a)fter the character). Try this out and add some more text.\n\n\n\n\n\n\nSummary of Vim modes\n\n\n\nVim has several modes. For our purposes, the Normal mode and Insert mode are the most important.\n\nNormal mode is the default mode for navigating and manipulating text.\n\nTo enter, press Esc from any other mode.\nUse this mode for moving around the file, deleting text, copying, pasting, and other commands.\n\nInsert mode is used for inserting and editing text.\n\nTo enter this mode, press i, I, a, A, o, or O from Normal mode.\nUse this mode to type text directly into the document."
  },
  {
    "objectID": "code-collection/2024-12-03-starting-vim/index.html#useful-shortcuts",
    "href": "code-collection/2024-12-03-starting-vim/index.html#useful-shortcuts",
    "title": "Starting Vim",
    "section": "Useful shortcuts",
    "text": "Useful shortcuts\n\n/pattern searches forward from the current cursor position for the text matching pattern. Type /, type the search term (pattern), and press Enter.\n\nTo search for the word “example”: first, ensure you are in Normal mode by pressing Esc. Then type /example and press Enter.\nTo navigate search results, n moves to the next occurrence of the search pattern.\nN moves to the previous occurrence of the search pattern.\n\n?pattern searches backward from the current cursor position for the text matching pattern. Press ?, type the search term (pattern), and press Enter.\n\nTo search backward for the word “example”, you would type ?example in Normal mode and press Enter.\n\n\nFor more useful shortcuts, refer to my post Cheatsheet of Vim shortcuts."
  },
  {
    "objectID": "code-collection/2024-12-03-starting-vim/index.html#acknowledgments",
    "href": "code-collection/2024-12-03-starting-vim/index.html#acknowledgments",
    "title": "Starting Vim",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nThis material is derived from work that is copyright © The Carpentries (https://carpentries.org/) made available under the CC BY 4.0 license."
  }
]