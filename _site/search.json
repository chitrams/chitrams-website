[
  {
    "objectID": "recipes/index.html",
    "href": "recipes/index.html",
    "title": "Recipes",
    "section": "",
    "text": "Beef noodle salad\n\n\n\nmains\n\n\neffort/medium\n\n\ntime/medium\n\n\n\nA fresh and delightful main-course salad.\n\n\n\nMay 5, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBaked porridge\n\n\n\nbreakfast\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nAn easy, delightful and warming breakfast, perfect for colder weather.\n\n\n\nMay 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBanana bread\n\n\n\ncakes\n\n\neffort/easy\n\n\ntime/medium\n\n\n\nOne of my favourites for rescuing unwanted bananas.\n\n\n\nApr 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nChewy ANZAC biscuits\n\n\n\ncookies\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nChewy on the inside and crispy on the outside. Addictive.\n\n\n\nApr 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMasala chai\n\n\n\ndrinks\n\n\neffort/easy\n\n\ntime/waiting\n\n\n\nA warming spiced tea with equal amounts of (heady) caffeine and sugar. This adaptation tastes similar to the one served in Dishoom London: the best masala chai I’ve ever had.\n\n\n\nApr 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nVegan banana cookies\n\n\n\ncookies\n\n\nvegan\n\n\neffort/easy\n\n\ntime/quick\n\n\n\nA delicious and easy-to-make cookie with common pantry ingredients.\n\n\n\nApr 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCarrot cake (and frostings)\n\n\n\ncakes\n\n\neffort/medium\n\n\ntime/medium\n\n\n\nAn easy take on the classic, with several frostings you could choose from.\n\n\n\nApr 3, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "recipes/2024-04-21-masala-chai/index.html",
    "href": "recipes/2024-04-21-masala-chai/index.html",
    "title": "Masala chai",
    "section": "",
    "text": "Adapted from Dishoom: From Bombay with love (goodreads). Serves 4.\nIngredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-04-21-masala-chai/index.html#footnotes",
    "href": "recipes/2024-04-21-masala-chai/index.html#footnotes",
    "title": "Masala chai",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI find any Assam will work well. All you want is a strong, dark, and robust blend. I’ve also used Yorkshire tea successfully. Lipton tea bags are OK in a pinch, I guess, but I find the resulting chai lacking in flavour. If you must, use more tea bags.↩︎"
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html",
    "href": "recipes/2024-04-03-carrot-cake/index.html",
    "title": "Carrot cake (and frostings)",
    "section": "",
    "text": "Adapted from Snacking Cakes by Yossy Arefi\nIngredients\n\n95g all-purpose flour\n65g whole wheat flour1\n1.5 teaspoons baking powder\n0.5 teaspoons bicarb soda\n85g sugar\n2 large eggs\n155g neutral oil2\n2 teaspoons ground cardamom\n2 teaspoons ground cinnamon\n1 teaspoon ground nutmeg\n3/4 teaspoon salt\n225g peeled and grated carrots3\n60g chopped pitted dates\n75g chopped toasted pecans4\n\nMethod\n\nPreheat oven to 175°C fan-forced. Butter or coat an 8in/20x20cm baking pan5 with non-stick spray. Line pan with a strip of parchment paper that hangs over two of the edges.\nIn a medium-sized bowl, sift all-purpose flour, whole wheat flour, baking powder, and bicarb soda. Whisk or mix until well-distributed.\nIn a separate medium-sized bowl, add sugar and eggs. Whisk or mix the mixture until pale and foamy (1m by hand, ~15s by electric mixer; careful not to overmix). Add oil, cardamom, cinnamon, nutmeg, and salt. Continue whisking/mixing until smooth and emulsified.\nAdd dry ingredients to the liquid mixture. Whisk (or use rubber spatula to mix) until well-combined and smooth. Then use rubber spatula to fold in grated carrots, dates, and pecans.\nPour batter into prepared pan. Tap pan gently to release any air bubbles and smooth top of batter.\nBake cake in middle rack of oven until puffed and golden and tester/skewer/butter knife inserted into the center comes out clean–30-40 minutes. Set pan on a rack to cool for ~15 minutes then use the parchment paper to lift the cake out of the pan and set it on the rack to cool completely.\nStore the cake, well-wrapped, at room temperature for up to 3 days. This cake also freezes well."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-whipped-cream-frosting",
    "href": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-whipped-cream-frosting",
    "title": "Carrot cake (and frostings)",
    "section": "Cream cheese and whipped cream frosting",
    "text": "Cream cheese and whipped cream frosting\n\n125g softened cream cheese (left out at room temperature for ~30m-1h)\n30g confectioners’ sugar\n150g cream\n2 teaspoons vanilla extract\n\nMethod\n\nTake a cold bowl (I place it in the freezer for 15-30m prior to using) and place cream cheese and sugar in bowl.\nMix with electric mixer until well-combined.\nAdd vanilla extract to mixture.\nEither slowly add cream or mix it into the mixture in two batches. Mix with electric mixer until soft peaks form; careful not to overmix.\nSpread onto cake when cake has completely cooled (cake has preferably been chilled in the fridge)."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#lemon-glaze",
    "href": "recipes/2024-04-03-carrot-cake/index.html#lemon-glaze",
    "title": "Carrot cake (and frostings)",
    "section": "Lemon glaze",
    "text": "Lemon glaze\n\n1 lemon\n100g confectioners’ sugar\n1T finely grated carrot\n\nMethod\n\nFinely zest lemon into a medium bowl. Juice the lemon, and set aside lemon juice.\nAdd confectioners sugar and finely grated carrot to bowl with zest along with 4tsp of the lemon juice. Whisk vigorously until smooth.\nAdd more lemon juice as needed to make a thick but pourable glaze.\nPour glaze over cooled cake and let it set for a few minutes before serving."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-butter-frosting",
    "href": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-butter-frosting",
    "title": "Carrot cake (and frostings)",
    "section": "Cream cheese and butter frosting",
    "text": "Cream cheese and butter frosting\n\n250g cream cheese at room temperature\n100g unsalted butter at room temperature\n150g powdered/confectioners’ sugar\n1T vanilla extract"
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-coconut-frosting",
    "href": "recipes/2024-04-03-carrot-cake/index.html#cream-cheese-and-coconut-frosting",
    "title": "Carrot cake (and frostings)",
    "section": "Cream cheese and coconut frosting",
    "text": "Cream cheese and coconut frosting\nDorie Greenspan’s\n\n250g cream cheese at room temperature\n113g (I think I used less) unsalted butter at room temperature\n450g confectioners’ sugar\n1T fresh lemon juice\n½ c shredded coconut, optional\nToasted finely chopped nuts and/or toasted coconut, for topping, optional\n\nMethod\n\nBeat cream cheese and butter together until smooth and creamy.\nGradually add the confectioners’ sugar and continue to beat until the frosting is velvety smooth.\nBeat in the lemon juice.\nStir coconut in with rubber spatula."
  },
  {
    "objectID": "recipes/2024-04-03-carrot-cake/index.html#footnotes",
    "href": "recipes/2024-04-03-carrot-cake/index.html#footnotes",
    "title": "Carrot cake (and frostings)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPreference for safflower oil but canola or rapeseed can also be used.↩︎\nThis can be substituted with all-purpose flour or any other whole-grain flour; preference for whole wheat for nuttiness↩︎\nPreference for coarsely grated carrots; finely grated carrots leads to smoother, generic cakey texture↩︎\nPreference for toasted pecans: either grill for 2m or pop them in the oven whilst it’s preheating, taking them out when they are golden and fragrant (~10m). The latter is preferable as less likely to burn.↩︎\nOther pans: a) cupcake tins: 12-18m; b) 9-in round pan: 30-40m↩︎"
  },
  {
    "objectID": "curation/index.html",
    "href": "curation/index.html",
    "title": "Curation",
    "section": "",
    "text": "My favourite yoga videos\n\n\n\n\n\n\nyoga\n\n\n\nA list for future reference: handy for when I feel like doing YouTube yoga but can’t figure out which video to pick.\n\n\n\n\n\nApr 26, 2024\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "curation/2024-04-26-yoga-with-adriene-favourites/index.html",
    "href": "curation/2024-04-26-yoga-with-adriene-favourites/index.html",
    "title": "My favourite yoga videos",
    "section": "",
    "text": "A list of my favourite yoga videos from Yoga With Adriene on YouTube, along with some notes as to why I enjoy them. These are the videos I keep coming back to.\n\nWorkouts\n\nMove - Day 27: Strong - 9/10 Intensity, 10/10 Enjoyment\nA more intense practice that focuses on upper-body strength.\nMove - Day 16: Anchor - 8/10 Intensity, 8/10 Enjoyment\nIncludes breathwork, core, side planks, legs, and balance-work.\nMove - Day 3: Stretch - 6/10 Intensity, 8/10 Enjoyment\nWorks on your legs and lower back, with warrior poses held for quite a while.\nMove - Day 11: Mobility - 6/10 Intensity, 8/10 Enjoyment\nExcellent leg activation with lots of hydrants. Mainly leg + back work.\nTrue - Day 13: Strength and Harmony - 7/10 Intensity, 8/10 Enjoyment\nGood core and whole-body exercises. More on the gentle side.\nYoga for Abdominal Strength - 8/10 Intensity, 8/10 Enjoyment\nA solid upper-body practice.\nLower Body Strength - 7/10 Intensity, 8/10 Enjoyment\nPretty good practice for the hips and legs. The channel doesn’t have many videos explicitly labelled for lower body (although there are actually quite a few, see above) so I like that this does what it says.\n\n\n\nEnergising\n\n20-minute Yoga to Shift Perspective- 7/10 Intensity, 10/10 Enjoyment\nIncludes side planks and some strength work. Excellent for energising, just enough strength work for a bit of warmth.\n20-minute Morning Flow- 7/10 Intensity, 9/10 Enjoyment\nCore work, some difficult poses, overall great energising practice\nShort Wake-Up Flow - 4/10 Intensity, 7/10 Enjoyment\nEasy practice, gentle full-body flow with some breathwork.\nOffice Break Yoga - 3/10 Intensity, 6/10 Enjoyment\nPretty good for a break when you’ve been sitting down for a while.\n\n\n\nStretches, some situation-specific\n\n7-minute Post-Run Yoga - 2/10 Intensity, 10/10 Enjoyment\nDoes what it says: excellent quad and calf stretches.\n13-minute Yoga for Digestion - 1/10 Intensity, 10/10 Enjoyment\nReally good for when you overeat and feel way too full of food. Makes your belly feel better somehow.\n13-minute Airport Yoga - 2/10 Intensity, 10/10 Enjoyment\nA quick, standing full-body stretch, excellent for when you’ve been sitting down for a while.\n5-minute Full-Body Stretch - 6/10 Intensity, 8/10 Enjoyment\nA good full-body stretch (on the mat) that gets you moving.\n\n\n\nRelaxing\n\n12-minute Wind-Down Yoga - 1/10 Intensity, 10/10 Enjoyment\nA relaxing practice that I really enjoy doing before bed.\n20-minute Gentle, Relaxing, Cozy Flow - 1/10 Intensity, 10/10 Enjoyment\nWhat it says it is: gentle, relaxing, and cozy."
  },
  {
    "objectID": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html",
    "href": "code-collection/2024-04-11-understanding-a-targets-workflow/index.html",
    "title": "Understanding a targets workflow",
    "section": "",
    "text": "I was recently introduced to the R package {targets} as part of learning how to develop software. As I continue to use it, I’ve been blown away by how much easier my workflow has become--even outside of software development--and I regret not having known of it sooner. It would have been nice to use this workflow when I was doing my Master’s thesis, which involved a large amount of complex and repeated analyses. So here’s my notes on the targets workflow so far: why use it, how to use it (especially if you’ve never used it before), and the resources I found most useful.\n\nWhy use a targets workflow?\nMost of us doing statistical analysis work on complex projects with moving parts. What I mean by this is: say I have a workflow that involves loading the data, some exploratory data analysis, fitting the data to a model, generating a plot of the data and the fitted model, and presenting the model coefficients in a table. It’s nothing too complicated, but it is complex: if one part changes, the rest of the project changes too.\nFor example, perhaps the data is updated and we want to re-run the whole analysis from start to finish. Or perhaps we decide that the model isn’t a good fit, so we fit a few other models and see which one is better; in this instance, only the model, plot, and table would change, but the rest of the project stays the same.\nAll this is fine if you have well-annotated code and know which parts of the script to re-run. But what if you accidentally run the wrong parts of the script that are computationally intensive and time-consuming? Or what if it takes a while to re-render your table because you’ve included so many variables, and you really didn’t have to because you only wanted the plot and not the table? Or even if you’re just tweaking a few variables and then making a plot: if you miss re-naming a variable earlier on in your script, your plot might not be generated correctly because it depends on that variable.\nIt’s in situations like these where {targets} can help you. Using a targets workflow means you’ll have it all laid out in front of you instead of needing to look for specific bits of code in your script and any dependencies. It’ll take the headache out of figuring out which parts of the analysis depends on which variables and functions. Then when you change a variable name (or any part of the project, really), you’ll know which parts of the analysis would need to be re-run, minus the headaches.\nTo summarise, I find a targets workflow especially useful in the following scenarios:\n\nif you’re doing something complex that has a lot of moving parts;\nif said moving parts will change as your project progresses; and/or\nif you’d like to re-run your analysis with different inputs (e.g. a new dataset), or to create different outputs (e.g. plots and tables); especially if you’re re-running your analysis a lot!\n\n\n\nHow to use targets\nWhen you’re first starting to program in R–especially if you’re mainly doing statistical analysis–a targets workflow might seem an unnecessarily complex way of going about things. When I first came across the targets workflow, I felt overwhelmed and didn’t understand how it could be useful for my workflow. So the way I’d recommend going about it is to take an existing project, and to convert the scripts in that project into a targets workflow.\nThe quick walkthrough in the user manual is an excellent example of how to use the targets workflow–I highly recommend reading it and going through the worked example. It does a much better job than I can in giving a reproducible example of how to use targets. Then I recommend converting your project to a targets workflow by using that walkthrough, or this quick tutorial.\nI’ll walk you through a conceptual overview of how I use targets. However, I highly recommend you first work through the two tutorials above.\nFirst, I make sure that I understand my workflow from beginning to end. This overview is the main advantage of using a targets workflow: you’ll have a bird’s eye view of your analysis and figure out where changes are necessary. For example, I may break down my analysis like this:\n\nRead in csv file of data\nSummarise data and generate a table\nFit models\nGenerate plot of data and fitted model\nGenerate table of model coefficients\n\nOnce I’ve done that and would like to start creating a targets workflow, I’ll run the following in my console:\n\nlibrary(targets)\nlibrary(tarchetypes)\n\ntar_script()\n\nThis creates a file in your project directory called _targets.R. This is the high-level overview of the project, so I open that and write out something like the following:\n\n# _targets.R file\n\n# Set-up ------------------------------\n\nlibrary(targets)\nlibrary(tarchetypes)\n\n# Load packages needed for this project\ntar_option_set(\n  packages = c(\"tidyverse\",\n               \"purrr\")\n  )\n\n# Set up a workspace when our code errors\ntar_option_set(workspace_on_error = TRUE)\n\n# Load functions to be used in our project\nsource(\"R/functions.R\")\n\n# Target objects ------------------------------\n\ntar_plan(\n  \n  # Load data\n  tar_file(\n    path_to_data,\n    \"./raw/data.csv\"\n    ),\n    \n  tar_target(\n    data,\n    read_csv(path_to_data)\n  ),\n  \n  # Create a summary table\n  tar_target(\n    data_summary_table,\n    summarise_data(data)\n  ),\n  \n  # Fit a model to the data\n  tar_target(\n    model,\n    model_data(data)\n  ),\n  \n  # Create plot of the data and fitted model\n  tar_target(\n    plot,\n    plot_data_with_model(data)\n  ),\n\n  # Create table of model coefficients\n  tar_target(\n    table_of_model,\n    tabulate_model(model)\n  )\n  \n)\n\nWhere summary_table, model_data, plot_data, and table_of_model are functions I’ve written up myself and saved in a separate script called functions.R.\nThe advantage of this workflow is you can change the one part that need changing in your workflow, and the {targets} package will change the rest for you. I can’t emphasise how life-changing this was for me.\nHere’s an example. If your data changes, you just need to change the first target object path_to_data to point to the new data file. You can then re-run the whole analysis using tar_make() and your resulting summary table, fitted model, plot, and table of model coefficients will be re-created with the new data you’ve pointed to. This is so much easier than having a script and needing to change data to new_data for every instance in which it’s referred to, or by re-running the whole script yourself. How convenient is that?\nYou can also have an overview of your workflow and what needs to be updated by running tar_visnetwork().\n\n\nFinal thoughts\nUsing a targets workflow requires you to change the way you approach programming. If you’re trained as a statistical programmer, I assume you’re used to writing your code in scripts. A targets workflow requires you to write your code as functions instead (otherwise known as “functional programming”).\nIt is a steep learning curve and it did take me a while to get my head around why and how I should use a targets workflow. It’s a different way of thinking about how to program.\nDespite this, I do highly recommend using a targets workflow instead of having multiple R scripts, for all the reasons I’ve stated above. Utilising this workflow is a step towards reproducible research, which is always great.\n\n\nResources for learning targets\nI think the best way to understand why a targets workflow is useful is to actually do a project within a targets workflow. So here are some resources I found helpful:\n\nThe targets R package user manual with a quick walkthrough to get you started. I highly recommend this one if you’re trying to set up a targets workflow by yourself.\nFor a more hands-on tutorial, I recommend this Carpentries workshop by Joel Nitta. I really liked that this gave you a bare-bones overview of what a targets workflow looks like. I used this the first time I tried to set up a targets workflow, but I also had the benefit of having someone walk me through using targets.\n\nMore readings on targets:\n\nThe official targets website\nWithin the official website: a list of examples for targets workflows"
  },
  {
    "objectID": "code-collection/2022-08-16-functional-programming-in-r/index.html",
    "href": "code-collection/2022-08-16-functional-programming-in-r/index.html",
    "title": "Functional programming",
    "section": "",
    "text": "I was recommended Hadley Wickham’s talk The Joy of Functional Programming (for Data Science) when I was struggling to code some iterative processes (you can find his talk on YouTube). The issue I ran into was trying to run row-wise and column-wise functions using for loops in R (a kerfuffle I’ll document in another blog post), which can get quite nasty with nested for loops.\nThe main lesson I learnt from the talk is: some clever programmers have wrapped up for loops in a function, map, that makes writing and reading code so much easier. It takes a while to get used to implementing these functions, but I can already say (in my very short two weeks of using it) that it’s a game-changer for my workflow. I think the main advantage of using map (and its cousins, which you can explore from the purrr package) is that it allow us to focus on both the action and the object whilst programming. In comparison, whilst using for loops I find myself focusing more on the object and the action can get lost. Here’s an example to show you what I mean:\n# For loop approach:\nout1 &lt;- vector(\"double\", ncol(mtcars))\nfor (i in seq_along(mtcars)) {\n  out1[[i]] &lt;- mean(mtcars[[i]], na.rm = TRUE)\n}\n\nout2 &lt;- vector(\"double\", ncol(mtcars))\nfor (i in seq_along(mtcars)) {\n  out2[[i]] &lt;- median(mtcars[[i]], na.rm = TRUE)\n}\n\n# Functional programming approach:\nlibrary(purrr)\n\nout1 &lt;- map_dbl(mtcars, mean, na.rm = TRUE)\nout2 &lt;- mtcars %&gt;% map_dbl(median, na.rm = TRUE)\n\n# Where map_dbl is an extension of map, returning\n# a vector in double ('dbl') type.\nYou only figure out which actions we’re taking (calculating the mean and median) a few lines down the for loop, after the object has been defined. There is also more room for error as we have to define the object before we run the action every time (i.e. creating the vector and sequencing along each column before calculating the mean and median). The functional programming approach is more concise. You can also see that map plays well with the pipe.\nSomething to note: in the example above, we use map_dbl instead of just map. This is one of the many extensions to the map function; there is also map_chr to return character-type lists.\nI also find the following figure handy to understand how the map functions work:\n\n\n\nThe map function in R. Figure from Hadley Wickham’s Advanced R.\n\n\nAnother thing to note is there are several ways of writing out the same thing using map. In the following bit of code you’ll find four different ways of writing out the same function: finding the number of unique values in each column of the mtcars dataset.\nmap_dbl(mtcars, function(x) length(unique(x)))\n\nmap_dbl(mtcars, ~ length(unique(.x)))\n\nmap_dbl(\n  .x = mtcars,\n  .f = length(unique(.x))\n)\n\nmap_dbl(\n  .x = mtcars,\n  .f = \\(x) length(unique(x))\n)\n\n# All three above returns:\n#&gt; mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#&gt;  25    3   27   22   22   29   30    2    2    3    6\nIt took me a while to figure out when I needed to add a dot to the variable (.x)–and to be honest, I still haven’t gotten to the bottom of why we sometimes need to prefix x with a dot (and sometimes not).\nHere’s another simple example, with an equivalent in lapply:\nmap(paths, ~ read.csv(.x))\n\n# Equivalent to the following:\nlapply(paths, function(x) read.csv(x))\nConcise and easy to read.\nThe main issue I had with learning this concept was the steep learning curve. You have to put quite a bit of time into learning which functions are available in the purrr package. I still struggle with figuring out which function I should use and how I should write out the program. But as with most R packages, there are good resources out there that explains these functions really well. So despite the difficulties, I’ll be replacing most of my for loops with map.\n\nUseful links for further reading:\n\nYou can find the purrr website here.\npurrr has a cheat sheet (released by RStudio) here.\nHadley Wickham gives a good explanation of this in Section 9.2 of his Advanced R textbook."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "About me\nI am a medical statistician and researcher with interests in epidemiology, climate change, and public health. More generally, I am interested in finding ways to be better at cooking, baking, learning, note-taking, writing, yoga, statistical programming, and understanding other people.\nI find that writing leads to understanding, and writing as if other people are going to read what you’re writing is the next level up. So here I am with a digital garden-kind of website.\n\n\nSelected academic articles\nSaraswati, C. M., Borghi, E., da Silva Breda, J. J., Flores-Urrutia, M. C., Williams, J., Hayashi, C., ... & McLain, A. C. (2022). Estimating childhood stunting and overweight trends in the European region from sparse longitudinal data. The Journal of Nutrition, 152(7), 1773-1782. doi:10.1093/jn/nxac072.\nSaraswati, C. M., Judge, M. A., Weeda, L. J., Bassat, Q., Prata, N., Le Souëf, P. N., & Bradshaw, C. J. (2024). Net benefit of smaller human populations to environmental integrity and individual health and wellbeing. Frontiers in Public Health, 12, 1339933. doi:10.3389/fpubh.2024.1339933."
  },
  {
    "objectID": "code-collection/2022-08-21-packages-for-summary-tables/index.html",
    "href": "code-collection/2022-08-21-packages-for-summary-tables/index.html",
    "title": "R packages for summary tables in Word",
    "section": "",
    "text": "A big part of what I do day-to-day is to provide a report of summary statistics. The researchers I work with would usually want this report in the format of a Word document (.docx) as it is (unfortunately) still the most widely used word processing software.\nI much prefer markdown and TeX files for reports, but you have to work to your audience. This is how I went down the rabbit hole of trying to find an R package that outputs summary tables into Word documents. So far I’ve found that gtsummary and table1 combined with the flextable package does the job best.\nAnother package that’s been brought to my attention is stargazer, but alas it only outputs to html. So I’ll walk you through a reproducible example of how to use the gtsummary and table1 packages to create aesthetically pleasing summary tables in Word, supported by the flextable package.\n\nUsing gtsummary\nLet’s create a table for the mtcars data, grouping by engine type (V-shaped vs straight). Here’s how we’d do it using the gtsummary package:\n\nlibrary(gtsummary)\n\nmtcars %&gt;%\n  select(mpg, cyl, disp, am, vs) %&gt;% \n  tbl_summary(by = vs)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\n0, N = 181\n1, N = 141\n\n\n\n\nmpg\n15.7 (14.8, 19.1)\n22.8 (21.4, 29.6)\n\n\ncyl\n\n\n\n\n\n\n    4\n1 (5.6%)\n10 (71%)\n\n\n    6\n3 (17%)\n4 (29%)\n\n\n    8\n14 (78%)\n0 (0%)\n\n\ndisp\n311 (276, 360)\n121 (83, 162)\n\n\nam\n6 (33%)\n7 (50%)\n\n\n\n1 Median (IQR); n (%)\n\n\n\n\n\n\n\n\n\nNot bad–and it plays well with the tidyverse. I also like that gtsummary tends to be smart about how the results should be displayed. For example, the cyl and am variables were automatically treated as discrete instead of continuous variables (thus giving us counts and percentages instead of median and IQR). You’ll notice that if you have the levels of a categorical variable as 0 and 1 (as in am), gtsummary provides only the count and percentage for the values coded as 1, which I’d argue eliminates redundancy.\n\n\nUsing table1\nNow, let’s use the table1 package:\n\nlibrary(table1)\n\ntable1(~ mpg + factor(cyl) + disp + factor(am) | factor(vs),\n       data = mtcars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n(N=18)\n1\n(N=14)\nOverall\n(N=32)\n\n\n\n\nmpg\n\n\n\n\n\nMean (SD)\n16.6 (3.86)\n24.6 (5.38)\n20.1 (6.03)\n\n\nMedian [Min, Max]\n15.7 [10.4, 26.0]\n22.8 [17.8, 33.9]\n19.2 [10.4, 33.9]\n\n\nfactor(cyl)\n\n\n\n\n\n4\n1 (5.6%)\n10 (71.4%)\n11 (34.4%)\n\n\n6\n3 (16.7%)\n4 (28.6%)\n7 (21.9%)\n\n\n8\n14 (77.8%)\n0 (0%)\n14 (43.8%)\n\n\ndisp\n\n\n\n\n\nMean (SD)\n307 (107)\n132 (56.9)\n231 (124)\n\n\nMedian [Min, Max]\n311 [120, 472]\n121 [71.1, 258]\n196 [71.1, 472]\n\n\nfactor(am)\n\n\n\n\n\n0\n12 (66.7%)\n7 (50.0%)\n19 (59.4%)\n\n\n1\n6 (33.3%)\n7 (50.0%)\n13 (40.6%)\n\n\n\n\n\n\n\n\nOne could argue that the formula format is a bit tedious as you can’t select the variables (for example, from a list or vector), but I find that you usually need to be cognisant of which variables you want included in a summary table anyways so this isn’t much of a problem for me. I also prefer how it looks as it fits more into the format of a ‘Table 1’ for scientific publishing (hence the package name).\nI did however have to wrap the cyl and am with factor() as table1 does not automatically treat these numeric variables as categorical variables.\n\n\nExporting using flextable\nNow let’s export these tables into Word. First you have to save your table as a flextable object. You do this by either using the as_flex_table() function for a gtsummary object, or the t1flex() function for a table1 object. Once you’ve done that, save_as_docx() saves the table into a Word document which you can copy and paste. Here’s how it would look:\n\n# For gtsummary\ntable &lt;- mtcars %&gt;%\n  select(mpg, cyl, disp, am, vs) %&gt;% \n  tbl_summary(by = vs)\n\nas_flex_table(table) %&gt;% \n  save_as_docx(path = \"./gtsummary.docx\")\n\n# For table1\ntable &lt;- table1(~ mpg + factor(cyl) + disp + factor(am) | factor(vs),\n       data = mtcars)\n\nt1flex(table) %&gt;% \n  save_as_docx(path = \"./table1.docx\")\n\nflextable also supports exporting to HTML, PDF, and PowerPoint documents; it also supports rendering tables as graphic files (such as png and jpeg).\n\n\nAdditional notes\nYou can add content to Word and PowerPoint documents using the officer package, but I haven’t used it before–my end users usually just copy-and-paste the tables. This is a package I’d like to look into."
  },
  {
    "objectID": "code-collection/2024-04-27-turing-way-handbook/index.html",
    "href": "code-collection/2024-04-27-turing-way-handbook/index.html",
    "title": "The Turing Way Handbook",
    "section": "",
    "text": "Links to The Handbook and GitHub Repository\n\n\n\nThe Turing Way Logo\n\n\nI first came across this project when trying to figure out what version control was and how to use Git. I got what I wanted: the handbook includes chapters on version control, code testing, and continuous integration (including how to set up continuous integration with GitHub Actions). What I loved about this project is they went the extra mile and also explained concepts in research and software reproducibility such as reusable code, and included a chapter on how to communicate your research.\nIt’s an excellent resource for learning about how to set up your projects for reproducibility."
  },
  {
    "objectID": "code-collection/index.html",
    "href": "code-collection/index.html",
    "title": "Code Collection",
    "section": "",
    "text": "The Turing Way Handbook\n\n\n\n\n\n\nresources\n\n\n\nAn excellent resource to ensure your research and/or data science projects are reproducible.\n\n\n\n\n\nApr 27, 2024\n\n\n1 min\n\n\n\n\n\n\n\nUnderstanding a targets workflow\n\n\n\n\n\n\nR\n\n\nworkflow\n\n\n\nAn introduction to {targets}: why use it, how to use it, and some resources to get you started. (In other words: reduce the mental burden of figuring out which step of the analysis you’re on.)\n\n\n\n\n\nApr 11, 2024\n\n\n7 min\n\n\n\n\n\n\n\nR packages for summary tables in Word\n\n\n\n\n\n\nR\n\n\ndocumentation\n\n\n\nExporting summary tables from R to Word doesn’t have to be painful. Featuring gtsummary, table1, and flextable.\n\n\n\n\n\nAug 21, 2022\n\n\n3 min\n\n\n\n\n\n\n\nFunctional programming\n\n\n\n\n\n\nR\n\n\nfunctional programming\n\n\n\nUsing map instead of for loops is (usually) better for you. (At the very least, you’ll learn a different way of thinking about recursion.)\n\n\n\n\n\nAug 16, 2022\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curated by Chitra",
    "section": "",
    "text": "I write about things I find interesting so my future self can find them more easily. Subjects within this curation include (but are not limited to):\n\ninteresting problems in statistics, data science, and/or statistical programming,\nresources to become a better statistician and/or programmer,\nrecipes that I refer to over and over again, and\nresources for self-improvement and wellness that I’ve found personally useful, such as:\n\nlearning how to learn,\nhow to be a better writer,\nyoga,\nconcepts from psychotherapy, and\nsocial psychology."
  },
  {
    "objectID": "recipes/2024-04-15-vegan-banana-cookies/index.html",
    "href": "recipes/2024-04-15-vegan-banana-cookies/index.html",
    "title": "Vegan banana cookies",
    "section": "",
    "text": "Adapted from Vegan Cookies Invade Your Cookie Jar (goodreads) by Isa Chandra Moskowitz and Terry Hope Romero. Makes about a dozen larger cookies, or 20 smaller cookies.\nIngredients\n\n1-2 very ripe medium banana\n70g canola oil\n100g sugar\n1 teaspoon vanilla extract\n115g all purpose flour\n0.5 teaspoon baking soda\n0.25 teaspoon salt\n0.25 teaspoon ground cinnamon\n160g rolled oats\n65g toasted chopped walnuts or pecans\n85g chocolate cut up into chunks, or chocolate chips (ideally these would be vegan)\n\nMethod\n\nPreheat oven to 180C. Lightly spray two baking sheets with oil, or line with parchment paper.\nIn a mixing bowl, mash banana(s) well.\nAdd oil, sugar, and vanilla, and mix.\nAdd flour, baking soda, salt, and cinnamon. Mix until just moistened.\nAdd oatmeal, walnuts, and chocolate chips. Using your hands or a spoon, mix well, ensuring oats are well-moistened. If dough is very slippery, add a little bit more flour.\nUsing clean, wet hands, roll dough into balls slightly smaller than a golf ball (about 3cm in diameter). Flatten slightly and place 5 cm apart on baking sheet.\nBake until lightly browned, 10-12 minutes. Remove from heat and allow to cool for two minutes, then transfer to a rack to cool completely. Store in an airtight container.\n\n\nNotes\nAs I’m not vegan, I prefer recipes that don’t rely on egg replacement products such as flaxseed.\nOther books I’d like to read about vegan baking:\n\nVegan cupcakes take over the world (goodreads)\nThe joy of vegan baking (goodreads)"
  },
  {
    "objectID": "recipes/2024-04-29-banana-bread/index.html",
    "href": "recipes/2024-04-29-banana-bread/index.html",
    "title": "Banana bread",
    "section": "",
    "text": "Ingredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-04-29-banana-bread/index.html#footnotes",
    "href": "recipes/2024-04-29-banana-bread/index.html#footnotes",
    "title": "Banana bread",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI’ve found that it doesn’t really matter how much banana you put in as this recipe is quite forgiving.↩︎\nThe ripeness of the bananas, on the other hand, is crucial. The riper (in other words, the more brown and smelling of fermentation) the better.↩︎\nSubstitute up to 35 g with dark brown sugar for a deeper caramelised flavour.↩︎\nSubstitute up to 150 g with whole-wheat flour, otherwise it could be quite dense (up to you, of course, but I prefer my banana breads fluffy).↩︎"
  },
  {
    "objectID": "recipes/2024-04-25-anzac-biscuits/index.html",
    "href": "recipes/2024-04-25-anzac-biscuits/index.html",
    "title": "Chewy ANZAC biscuits",
    "section": "",
    "text": "Ingredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-04-25-anzac-biscuits/index.html#footnotes",
    "href": "recipes/2024-04-25-anzac-biscuits/index.html#footnotes",
    "title": "Chewy ANZAC biscuits",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTo make these biscuits even chewier, substitute up to 70 g of this flour with a high-protein flour. A potential issue with doing this, however, is your flour may absorb more liquids, leading to dryness. See note in Step 5.↩︎\nYou could use white sugar in a pinch, but they will result in less chewy cookies. Adversely, substituting with dark brown sugar leads to even chewier cookies.↩︎\nAlternatively, use shredded coconut–or a mix of both.↩︎\nIf your mix is a tad dry–in other words, difficult to roll into a ball without breaking (perhaps because you substituted a different flour)–you can add a bit more melted butter. It’s better if the dough is too wet from too much butter than too little, so err on the side of too much.↩︎"
  },
  {
    "objectID": "about/index.html#selected-academic-articles",
    "href": "about/index.html#selected-academic-articles",
    "title": "About",
    "section": "Selected academic articles",
    "text": "Selected academic articles\nSaraswati, C. M., Borghi, E., da Silva Breda, J. J., Flores-Urrutia, M. C., Williams, J., Hayashi, C., ... & McLain, A. C. (2022). Estimating childhood stunting and overweight trends in the European region from sparse longitudinal data. The Journal of Nutrition, 152(7), 1773-1782. doi:10.1093/jn/nxac072.\nSaraswati, C. M., Judge, M. A., Weeda, L. J., Bassat, Q., Prata, N., Le Souëf, P. N., & Bradshaw, C. J. (2024). Net benefit of smaller human populations to environmental integrity and individual health and wellbeing. Frontiers in Public Health, 12, 1339933. doi:10.3389/fpubh.2024.1339933."
  },
  {
    "objectID": "recipes/2024-05-04-baked-porridge/index.html",
    "href": "recipes/2024-05-04-baked-porridge/index.html",
    "title": "Baked porridge",
    "section": "",
    "text": "Serves 2. Adapted from The Natural Baker by Henrietta Inman.\nIngredients\nYou’ll also need\nMethod"
  },
  {
    "objectID": "recipes/2024-05-04-baked-porridge/index.html#footnotes",
    "href": "recipes/2024-05-04-baked-porridge/index.html#footnotes",
    "title": "Baked porridge",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI like to use a tart cooking apple like Granny Smith’s.↩︎\nIf you’d like to substitute with plant-based milks like almond milk, I find that you need more of it, about 400-450 g.↩︎\nYou can do this step the night before. When the apples are done, turn off the oven, leave the oven door slightly ajar, and let the apples sit there until morning.↩︎"
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html",
    "title": "Beef noodle salad",
    "section": "",
    "text": "Serves 4. Adapted from David Tanis’ Vietnamese Lemongrass Beef and Noodle Salad on NYT Cooking."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#all-ingredients-for-reference",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#all-ingredients-for-reference",
    "title": "Beef noodle salad",
    "section": "All ingredients, for reference",
    "text": "All ingredients, for reference\nDipping sauce\n\n5 tablespoons light brown sugar (separated: 4+1)\n3 tablespoons rice vinegar\n4 tablespoons lime juice (from two large limes, or use bottled)\n6 tablespoons fish sauce1 (separated: 4+2)\n5 garlic cloves - minced (separated: 2+3)\n3 cm piece of ginger - peeled and minced\n2 chillies - chopped\n\nSalad\n\n340 g rice vermicelli noodles\n1 head lettuce\n1 medium carrot\n1 small cucumber\n1 daikon radish\nA handful of bean sprouts\n\nBeef stir-fry\n\n500 g beef - sliced thinly (less than 1 cm thick)\n80g lemongrass paste or 3 tablespoons lemongrass - tender centres finely chopped2\nVegetable oil - for stir-frying\n\nGarnish\n\nBunch coriander\nBunch mint leaves\n4 tablespoons crushed roasted peanuts"
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#make-the-dipping-sauce",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#make-the-dipping-sauce",
    "title": "Beef noodle salad",
    "section": "(1) Make the dipping sauce",
    "text": "(1) Make the dipping sauce\nGrab the following ingredients:\n\n4 tablespoons light brown sugar\n3 tablespoons rice vinegar\n4 tablespoons lime juice (from two large limes, or use bottled)\n4 tablespoons fish sauce\n2 garlic cloves - minced\n3 cm piece of ginger - peeled and minced\n2 chillies - chopped\n\nPut them all in a bowl, stir to combine, then let sit for at least 15 minutes."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-noodles",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-noodles",
    "title": "Beef noodle salad",
    "section": "(2) Prep the noodles",
    "text": "(2) Prep the noodles\nWhilst the sauce is marinating, let’s prepare the noodles.\n\n340 g rice vermicelli noodles\n\nBoil some water in a large pot. When water has boiled, add the noodles to the pot. Cook according to package directions. Once cooked, drain the water and run the noodles under a tap of cold water. Let sit to cool."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-beef",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-the-beef",
    "title": "Beef noodle salad",
    "section": "(3) Prep the beef",
    "text": "(3) Prep the beef\nWhile the noodles are cooling down, we’ll prepare the beef. Grab the following:\n\n500 g beef - sliced thinly (less than 1 cm thick)\n2 tablespoons fish sauce\n1 tablespoon light brown sugar\n3 garlic cloves - minced\n80g lemongrass paste or 3 tablespoons lemongrass - tender centres finely chopped\n\nCombine all the above in a bowl and let sit to marinate for at least 15 minutes."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-salad",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#prep-salad",
    "title": "Beef noodle salad",
    "section": "(4) Prep salad",
    "text": "(4) Prep salad\nWhilst the beef is marinating, we’ll prepare the salad. Grab the salad ingredients:\n\n1 head lettuce - yummy leaves washed and separated\n1 medium carrot - cut and julienned3\n1 small cucumber - cut and julienned\n1 daikon radish - cut and julienned\nA handful of bean sprouts\n\n\nWith the lettuce, separate the tender leaves and wash them. Leave to dry.\nJulienne the carrot, cucumber, and daikon. Set aside.\nBlanch the bean sprouts in boiling water, or leave them raw."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#stir-fry-beef",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#stir-fry-beef",
    "title": "Beef noodle salad",
    "section": "(5) Stir-fry beef",
    "text": "(5) Stir-fry beef\nLet’s stir-fry the beef now. Grab the following:\n\nMarinated beef from Section 3 above\nVegetable oil - for stir-frying\n\nPour in a tablespoon of vegetable oil in the frying pan and heat up on medium-high heat. Once pan is heated, cook the marinated beef in batches, making sure you don’t overcrowd the pan. Once you’ve cooked all the beef, set aside."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#all-together-now",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#all-together-now",
    "title": "Beef noodle salad",
    "section": "(6) All together, now",
    "text": "(6) All together, now\nNow, to put them all together.\n\nBunch coriander\nBunch mint leaves\n4 tablespoons crushed roasted peanuts\n\n\nIn your serving bowls: add the cooled rice noodles and the salad (lettuce, carrots, cucumbers, and daikon strips).\nPour the dipping sauce from Section 1 on top of the salad.\nAdd the beef on top of the salad.\nGarnish with coriander, mint leaves, and crushed peanuts."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#notes",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#notes",
    "title": "Beef noodle salad",
    "section": "Notes",
    "text": "Notes\nDon’t let the amount of ingredients intimidate you. It is more ingredients than your average dish, but most of them are pantry items (assuming you do a lot of Asian-style cooking). The preparation itself is simple. It takes me about 45 minutes to make at a leisurely pace, including all the chopping.\nI also like to substitute the beef with chicken or pork, cooked with the same lemongrass marinade. I haven’t figured out how to substitute with tofu.\nThe name of this salad is Bun Bo Xao."
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#footnotes",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#footnotes",
    "title": "Beef noodle salad",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nUse good quality fish sauce. In Australia, I prefer Squid or Red Boat. See this blog post for what makes a good fish sauce.↩︎\nI would use canned or lemongrass hearts as the middles can be hard to chop when fresh or frozen.↩︎\nIn other words, matchsticks. For instructions, see this Serious Eats guide.↩︎"
  },
  {
    "objectID": "recipes/2024-05-05-beef-noodle-salad/index.html#all-ingredients",
    "href": "recipes/2024-05-05-beef-noodle-salad/index.html#all-ingredients",
    "title": "Beef noodle salad",
    "section": "All ingredients",
    "text": "All ingredients\nDipping sauce\n\n5 tablespoons light brown sugar (separated: 4+1)\n3 tablespoons rice vinegar\n4 tablespoons lime juice (from two large limes, or use bottled)\n6 tablespoons fish sauce1 (separated: 4+2)\n5 garlic cloves - minced (separated: 2+3)\n3 cm piece of ginger - peeled and minced\n2 chillies - chopped\n\nSalad\n\n340 g rice vermicelli noodles\n1 head lettuce\n1 medium carrot\n1 small cucumber\n1 daikon radish\nA handful of bean sprouts\n\nBeef stir-fry\n\n500 g beef - sliced thinly (less than 1 cm thick)\n80g lemongrass paste or 3 tablespoons lemongrass - tender centres finely chopped2\nVegetable oil - for stir-frying\n\nGarnish\n\nBunch coriander\nBunch mint leaves\n4 tablespoons crushed roasted peanuts"
  }
]