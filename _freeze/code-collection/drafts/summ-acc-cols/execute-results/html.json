{
  "hash": "90bf863f60f6115907a90bf999899e56",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Summarising across columns'\nauthor: 'Chitra M Saraswati'\ndate: '2022-10-26'\nslug: summarising-across-columns-tidyverse\ncategories:\n  - R\n  - tidyverse\ndraft: true\n---\n\n\n\n\nSomething commonly done in analyses is summarising across multiple columns: for example, you might want to calculate the mean for all variables in your dataset. I'll explain how to do this using the tidyverse tools. So let's load the tidyverse package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nFor our first example, let's calculate the mean for each column in the `airquality` dataset, grouped by month.\n\nThe main function here is `across()` which lets you apply a function, or multiple functions, across multiple columns. The important options here is `.cols`, `.fns` and `.names`. I'll paste\n\n.cols, cols <tidy-select> Columns to transform. Because across() is used within functions like summarise() and mutate(), you can't select or compute upon grouping variables. .fns Functions to apply to each of the selected columns. Possible values are: • A function, e.g. mean. • A purrr-style lambda, e.g. \\~ mean(.x,na.rm = TRUE) • A list of functions/lambdas, e.g. list(mean = mean, n_miss = \\~ sum(is.na(.x)) • NULL: the default value, returns the selected columns in a data frame without applying a transformation. This is useful for when you want to use a function that takes a data frame. Within these functions you can use cur_column() and cur_group() to access the current column and grouping keys respectively. ... Additional arguments for the function calls in .fns. Using these ... is strongly discouraged because of issues of timing of evaluation. .names A glue specification that describes how to name the output columns. This can use {.col} to stand for the selected column name, and {.fn} to stand for the name of the function being applied. The default (NULL) is equivalent to \"{.col}\" for the single function case and \"{.col}\\_{.fn}\" for the case where a list is used for .fns.\n\nIn this instance, we use `.fns` to define the function we want to run. Additional options for `mean`--in this instance, `na.rm`, is added using a comma.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairquality %>% \n  group_by(Month) %>% \n  summarise(across(\n    .cols = -Day,\n    .fns = mean,\n    na.rm = TRUE\n  ))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `across(.cols = -Day, .fns = mean, na.rm = TRUE)`.\nℹ In group 1: `Month = 5`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  Month Ozone Solar.R  Wind  Temp\n  <int> <dbl>   <dbl> <dbl> <dbl>\n1     5  23.6    181. 11.6   65.5\n2     6  29.4    190. 10.3   79.1\n3     7  59.1    216.  8.94  83.9\n4     8  60.0    172.  8.79  84.0\n5     9  31.4    167. 10.2   76.9\n```\n\n\n:::\n:::\n\n\n\n\nHere's how to count missing values for each column, grouped by month. In this instance we write the function using `~` instead of `.fns` and refer to the columns using `.x`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairquality %>% \n  group_by(Month) %>% \n  summarise(across(\n    .cols = -Day,\n    ~sum(is.na(.x))\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  Month Ozone Solar.R  Wind  Temp\n  <int> <int>   <int> <int> <int>\n1     5     5       4     0     0\n2     6    21       0     0     0\n3     7     5       0     0     0\n4     8     5       3     0     0\n5     9     1       0     0     0\n```\n\n\n:::\n:::\n\n\n\n\nLet's check these counts using the `summary()` function for month five:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairquality %>% \n  filter(Month == 5) %>% select(Ozone, Solar.R) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Ozone           Solar.R     \n Min.   :  1.00   Min.   :  8.0  \n 1st Qu.: 11.00   1st Qu.: 72.0  \n Median : 18.00   Median :194.0  \n Mean   : 23.62   Mean   :181.3  \n 3rd Qu.: 31.50   3rd Qu.:284.5  \n Max.   :115.00   Max.   :334.0  \n NA's   :5        NA's   :4      \n```\n\n\n:::\n:::\n\n\n\n\nRenaming across columns\n\n``` r\ndat_allergy <- dat_allergy %>%\n  rename_with(.cols = -or_matgate_nbr,\n              ~ paste0(\"allergy_\", .x))\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}